{
  "address": "0xfe92377e5fED485DD694365fFf77c7C43486C83d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "artifactType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "AddNewArtifact",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newBaseUri",
          "type": "string"
        }
      ],
      "name": "BaseUriChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "artifactType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "UriChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "addNewArtifact",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArtifactsTypesAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toolsContractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_baseUrl",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_blackListContractAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "artifactType",
          "type": "uint256"
        }
      ],
      "name": "lootArtifact",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "artifactType",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "artifactTypes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseUri",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toolsAddress",
          "type": "address"
        }
      ],
      "name": "setToolsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "artifactType",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "setUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "artifactType",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd34c1cafd30a9b004963b8b8242c889e63f109058e170afca60841594395d45f",
  "receipt": {
    "to": null,
    "from": "0x521CBd70fDee50Dfe248EA60Dc9792E36c8FE3C3",
    "contractAddress": "0xfe92377e5fED485DD694365fFf77c7C43486C83d",
    "transactionIndex": 0,
    "gasUsed": "2346360",
    "logsBloom": "0x
    "blockHash": "0x2592b349910985291a9b7a8cd0ecc9ee7dbdeb1c229b26784640eaf8ef2c69dc",
    "transactionHash": "0xd34c1cafd30a9b004963b8b8242c889e63f109058e170afca60841594395d45f",
    "logs": [],
    "blockNumber": 37182668,
    "cumulativeGasUsed": "2346360",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "eb86febf9b0da114deb60ddeec8b28ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"artifactType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"AddNewArtifact\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseUri\",\"type\":\"string\"}],\"name\":\"BaseUriChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"artifactType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"UriChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"addNewArtifact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArtifactsTypesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toolsContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_baseUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_blackListContractAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"artifactType\",\"type\":\"uint256\"}],\"name\":\"lootArtifact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artifactType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"artifactTypes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toolsAddress\",\"type\":\"address\"}],\"name\":\"setToolsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artifactType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artifactType\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_artifactTypes\":{\"details\":\"Number of types of artifactsStarts with 0\"},\"_baseURI\":{\"details\":\"Base URI for IPFS\"},\"_blacklist\":{\"details\":\"The address of the Blacklist contract\"},\"_tools\":{\"details\":\"The address of the Tools contract\"},\"_typesToUris\":{\"details\":\"Mapping from artifact type to it's URI\"}},\"title\":\"Artifact tokens can be aquired during mining        Artifacts are used to craft tools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNewArtifact(string)\":{\"notice\":\"See {IArtifacts-addNewArtifact}\"},\"getArtifactsTypesAmount()\":{\"notice\":\"See {IArtifacts-getArtifactsTypesAmount}\"},\"getBaseUri()\":{\"notice\":\"See {IArtifacts-getBaseUri}\"},\"lootArtifact(address,uint256)\":{\"notice\":\"See {IArtifacts-lootArtifact}\"},\"mint(uint256,address,uint256)\":{\"notice\":\"See {IArtifacts-mint}\"},\"mintBatch(address,uint256[],uint256[])\":{\"notice\":\"See {IArtifacts-mintBatch}\"},\"pause()\":{\"notice\":\"See {IArtifacts-pause}\"},\"setBaseUri(string)\":{\"notice\":\"See {IArtifacts-setBaseUri}\"},\"setToolsAddress(address)\":{\"notice\":\"See {IArtifacts-setToolsAddress}\"},\"setUri(uint256,string)\":{\"notice\":\"See {IArtifacts-setUri}\"},\"uri(uint256)\":{\"notice\":\"See {IArtifacts-uri}\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Artifacts.sol\":\"Artifacts\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xc3e465e1fdd0e491688ad75ef1b946e1680e7f9f78bf5beeefd6daed8693c856\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/Artifacts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./interfaces/IBlackList.sol\\\";\\nimport \\\"./interfaces/IArtifacts.sol\\\";\\nimport \\\"./interfaces/ITools.sol\\\";\\n\\n/// @title Artifact tokens can be aquired during mining\\n///        Artifacts are used to craft tools\\ncontract Artifacts is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ERC1155Upgradeable,\\n    IArtifacts,\\n    PausableUpgradeable\\n{\\n    /// @dev The address of the Blacklist contract\\n    IBlackList private _blacklist;\\n    /// @dev The address of the Tools contract\\n    ITools private _tools;\\n\\n    /// @dev Base URI for IPFS\\n    string private _baseURI;\\n\\n    /// @dev Number of types of artifacts\\n    /// @dev Starts with 0\\n    uint256 private _artifactTypes;\\n\\n    /// @dev Mapping from artifact type to it's URI\\n    mapping(uint256 => string) private _typesToUris;\\n\\n    /// @dev Checks that user is not in blacklist\\n    /// @param user The user to check\\n    modifier ifNotBlacklisted(address user) {\\n        require(!_blacklist.check(user), \\\"Artifacts: user in blacklist\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _toolsContractAddress,\\n        string memory _baseUrl,\\n        address _blackListContractAddress\\n    ) external initializer {\\n        _tools = ITools(_toolsContractAddress);\\n        _baseURI = _baseUrl;\\n        _blacklist = IBlackList(_blackListContractAddress);\\n\\n        __ERC1155_init(\\\"\\\");\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n\\n    /// @notice See {IArtifacts-getArtifactsTypesAmount}\\n    function getArtifactsTypesAmount() external view returns (uint256) {\\n        return _artifactTypes;\\n    }\\n\\n    /// @notice See {IArtifacts-getBaseUri}\\n    function getBaseUri() external view returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /// @notice See {IArtifacts-mint}\\n    function mint(\\n        uint256 artifactType,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner whenNotPaused ifNotBlacklisted(to) {\\n        require(\\n            artifactType <= _artifactTypes,\\n            \\\"Artifacts: This artifact doesn't exist\\\"\\n        );\\n        _mint(to, artifactType, amount, \\\"\\\");\\n    }\\n\\n    /// @notice See {IArtifacts-mintBatch}\\n    function mintBatch(\\n        address to,\\n        uint256[] memory artifactTypes,\\n        uint256[] memory amounts\\n    ) external onlyOwner whenNotPaused ifNotBlacklisted(to) {\\n        for (uint256 counter = 0; counter < artifactTypes.length; counter++) {\\n            require(\\n                artifactTypes[counter] <= _artifactTypes,\\n                \\\"Artifacts: this artifact type doesn't exists\\\"\\n            );\\n        }\\n\\n        _mintBatch(to, artifactTypes, amounts, \\\"\\\");\\n    }\\n\\n    /// @notice See {IArtifacts-lootArtifact}\\n    function lootArtifact(\\n        address user,\\n        uint256 artifactType\\n    ) external ifNotBlacklisted(user) {\\n        require(\\n            _msgSender() == _tools.getMiningAddress(),\\n            \\\"Artifacts: only mining contract can call this function\\\"\\n        );\\n        _mint(user, artifactType, 1, \\\"\\\");\\n    }\\n\\n    /// @notice See {IArtifacts-pause}\\n    function pause() external onlyOwner {\\n        if (!paused()) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    /// @notice See {IArtifacts-addNewArtifact}\\n    function addNewArtifact(string memory newUri) external onlyOwner {\\n        _addNewArtifact(newUri);\\n    }\\n\\n    /// @notice See {IArtifacts-setToolsAddress}\\n    function setToolsAddress(address toolsAddress) external onlyOwner {\\n        require(toolsAddress != address(0), \\\"Artifacts: zero address\\\");\\n        _tools = ITools(toolsAddress);\\n    }\\n\\n    /// @notice See {IArtifacts-setBaseUri}\\n    function setBaseUri(string calldata newBaseUri) external onlyOwner {\\n        _setBaseUri(newBaseUri);\\n    }\\n\\n    /// @notice See {IArtifacts-setUri}\\n    function setUri(\\n        uint256 artifactType,\\n        string calldata newUri\\n    ) external onlyOwner {\\n        _setUri(artifactType, newUri);\\n    }\\n\\n    /// @notice See {IArtifacts-uri}\\n    function uri(\\n        uint256 artifactType\\n    )\\n        public\\n        view\\n        override(ERC1155Upgradeable, IArtifacts)\\n        returns (string memory)\\n    {\\n        require(\\n            artifactType <= _artifactTypes,\\n            \\\"Artifacts: This artifact doesn't exist\\\"\\n        );\\n        return _typesToUris[artifactType];\\n    }\\n\\n    /// @dev Private implementation of `addNewArtifact`\\n    function _addNewArtifact(string memory newUri) private {\\n        _artifactTypes += 1;\\n        _tools.increaseArtifactsTypesAmount();\\n        // New artifact gets URI formed from base URI and uri from parameters\\n        // Example: ipfs://pinata.cloud/QmYqiEcxH58aTuQha2qxHp6c3zfv5NpNWxAhGQtGpBubwe\\n        _typesToUris[_artifactTypes] = string(\\n            abi.encodePacked(_baseURI, newUri)\\n        );\\n        emit AddNewArtifact(_artifactTypes, newUri);\\n    }\\n\\n    /// @dev Private implementation of `setBaseUri`\\n    function _setBaseUri(string calldata newBaseUri) private {\\n        _baseURI = newBaseUri;\\n        emit BaseUriChanged(newBaseUri);\\n    }\\n\\n    /// @dev Private implementation of `setUri`\\n    function _setUri(uint256 artifactType, string calldata newUri) private {\\n        require(\\n            artifactType <= _artifactTypes,\\n            \\\"Artifacts: This artifact doesn't exist\\\"\\n        );\\n        _typesToUris[artifactType] = newUri;\\n        emit UriChanged(artifactType, newUri);\\n    }\\n}\\n\",\"keccak256\":\"0x0f45043eb79f17b73b1fd25d6ef5000f994786c35fc493a2dbd0ca4d3243f8f2\",\"license\":\"MIT\"},\"contracts/interfaces/IArtifacts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\n\\n/// @title Interface for the Artifacts contract\\ninterface IArtifacts is IERC1155Upgradeable {\\n    event AddNewArtifact(uint256 artifactType, string newUri);\\n    event BaseUriChanged(string newBaseUri);\\n    event UriChanged(uint256 artifactType, string newUri);\\n\\n    /// @notice Returns the amount of types of artifacts\\n    /// @return The amount of types of artifacts\\n    function getArtifactsTypesAmount() external view returns (uint256);\\n\\n    /// @notice Returns the base URI for IPFS\\n    /// @return Base URI for IPFS\\n    function getBaseUri() external view returns (string memory);\\n\\n    /// @notice Mints `amount` of artifacts of `artifactType` to `to`\\n    /// @param artifactType The type of artifact to mint\\n    /// @param to The receiver of artifacts\\n    /// @param amount The amount of artifacts to mint\\n    function mint(uint256 artifactType, address to, uint256 amount) external;\\n\\n    /// @notice Mints batches of artifacts\\n    /// @param to The receiver of artifacts\\n    /// @param artifactTypes The types of artifacts to mint\\n    /// @param amounts The amount of artifacts of each type to mint\\n    function mintBatch(\\n        address to,\\n        uint256[] memory artifactTypes,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    /// @notice Mints a single artifact if Mining contract requests\\n    /// @param user The receiver of artifact\\n    /// @param artifactType The type of artifact to mint\\n    function lootArtifact(address user, uint256 artifactType) external;\\n\\n    /// @notice Pauses contract if it's active. Activates it if it's paused\\n    function pause() external;\\n\\n    /// @notice Adds a new artifact with the provided URI\\n    /// @param newUri The URI of a new artifact\\n    function addNewArtifact(string memory newUri) external;\\n\\n    /// @notice Changes the address of Tools contract\\n    /// @param toolsAddress The new address of Tools contract\\n    function setToolsAddress(address toolsAddress) external;\\n\\n    /// @notice Changes the base URI for IPFS\\n    /// @param newBaseUri The new base URI for IPFS\\n    function setBaseUri(string calldata newBaseUri) external;\\n\\n    /// @notice Changes the URI for the specific artifact type\\n    /// @param artifactType The type of the artifact\\n    /// @param newUri The new URI\\n    function setUri(uint256 artifactType, string calldata newUri) external;\\n\\n    /// @notice Returns the URI for a specific artifact type\\n    /// @param artifactType The type of the artifact to get a URI for\\n    /// @return The URI for a specific artifact type\\n    function uri(uint256 artifactType) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe3fd6ed8a003a629d2692d9bf4bb7bddd922bd800f7c87e36924a4816d95f885\",\"license\":\"MIT\"},\"contracts/interfaces/IBlackList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n/// @title Interface for the Blacklist contract\\ninterface IBlackList {\\n    event AddedToBlacklist(address user);\\n    event RemovedFromBlacklist(address user);\\n\\n    /// @notice Checks that user is blacklisted\\n    /// @param user The address of the user to check\\n    /// @return True if user is blacklisted. Otherwise - false\\n    function check(address user) external returns (bool);\\n\\n    /// @notice Adds a user to the blacklist\\n    /// @param user The address of the user to add to the blacklist\\n    function addToBlacklist(address user) external;\\n\\n    /// @notice Removes a user from the blacklist\\n    /// @param user The address of the user to remove from the blacklist\\n    function removeFromBlacklist(address user) external;\\n}\\n\",\"keccak256\":\"0x4036d27028edf166adb954fb9f408f33b483546568f477c41eabafda2cf45c07\",\"license\":\"MIT\"},\"contracts/interfaces/ITools.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\n/// @title Interface for Tools contract\\ninterface ITools is IERC1155Upgradeable {\\n    /// @dev Types of resources\\n    enum Resources {\\n        Berry, // a.k.a. FOOD\\n        Tree, // a.k.a. TECH\\n        Gold // a.k.a. AURA\\n    }\\n\\n    /// @dev Recipe to craft a tool\\n    struct Recipe {\\n        // Amount of Tree to spend\\n        uint256 resourcesAmount;\\n        // Mapping (artifacts id => amonut)\\n        mapping(uint256 => uint256) artifacts;\\n    }\\n\\n    /// @dev Struct of a tool\\n    struct Tool {\\n        uint32 strengthCost; // Cost of using this tool for mining. Strength decreases each time\\n        uint32 maxStrength; // Max strength of a tool\\n        uint32 miningDuration; // The duraion of mining session with this tool\\n        uint256 energyCost; // Cost in Berry tokens to start mining session with this tool\\n    }\\n\\n    /// @dev Represents a tool owned by a user\\n    struct OwnedTool {\\n        uint128 toolType; // Type of the tool\\n        uint128 strength; // Current strength of the tool\\n    }\\n\\n    /// @notice Indicates that a new tool was added\\n    /// @param toolType Type of the tool\\n    /// @param newURI URI of the tool\\n    event AddTool(uint256 toolType, string newURI);\\n\\n    /// @notice Indicates that a tool was crafted\\n    /// @param user User who crafted a tool\\n    /// @param toolType Type of the tool\\n    /// @param toolId Unique ID of the tool\\n    event Craft(address user, uint256 toolType, uint256 toolId);\\n\\n    /// @notice Indicates that tool recipe was created or updated\\n    /// @param toolType Type of the tool\\n    /// @param resourcesAmount The amount of Tree tokens to craft a tool\\n    /// @param artifactsAmounts The amount of artifacts to craft a tool\\n    event RecipeCreatedOrUpdated(\\n        uint256 toolType,\\n        uint256 resourcesAmount,\\n        uint256[] artifactsAmounts\\n    );\\n\\n    /// @notice Indicates that a new base URI was set\\n    /// @param baseURI A new base URI\\n    event BaseURI(string baseURI);\\n\\n    /// @notice Indicates that a tool has been fully repaired\\n    /// @param toolId The ID of the repaired tool\\n    event ToolRepaired(uint256 toolId);\\n\\n    /// @notice Indicates that tool type's properties have been changed\\n    /// @param toolType The type of the tools to change the properties of\\n    event ToolPropertiesSet(uint256 toolType);\\n\\n    /// @dev Indicates that `amount` of tools of `toolType` was minted to `to`\\n    /// @param to Receiver of tool\\n    /// @param toolType Type of the tool\\n    /// @param amount The amount of tools minted\\n    event MintType(address to, uint256 toolType, uint256 amount);\\n\\n    /// @dev Indicates that one tool of `toolType` with `toolId` was minted to `to`\\n    /// @param to Receiver of tool\\n    /// @param toolType Type of the tool\\n    /// @param toolId The ID of the tool minted\\n    event MintId(address to, uint256 toolType, uint256 toolId);\\n\\n    /// @dev Indicates that one tool of type `toolType` with `toolId` was transferred\\n    ///      from `from` to `to`\\n    /// @param from The sender of tokens\\n    /// @param to The receiver of tokens\\n    /// @param toolType Type of the tool\\n    /// @param toolId The ID of the tool transferred\\n    event Transfer(address from, address to, uint256 toolType, uint256 toolId);\\n\\n    /// @notice Returns properties of the tool\\n    /// @param user User owning a tool\\n    /// @param toolId The ID of the tool\\n    /// @return toolType Type of the tool\\n    /// @return strength Current strength of the tool\\n    /// @return strengthCost Cost in strength to start mining with the tool\\n    /// @return miningDuration Duration of a mining session with the tool\\n    /// @return energyCost Cost in Berry tokens to start mining session with the tool\\n    function getToolProperties(\\n        address user,\\n        uint256 toolId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 toolType,\\n            uint256 strength,\\n            uint256 strengthCost,\\n            uint256 miningDuration,\\n            uint256 energyCost\\n        );\\n\\n    /// @notice Returns properties of type of the tool\\n    /// @param toolType Type of the tool to get the properties of\\n    /// @return maxStrength Max strength of the tool type\\n    /// @return strengthCost Cost in strength to start mining with the tool\\n    /// @return miningDuration Duration of a mining session with the tool\\n    /// @return energyCost Cost in Berry tokens to start mining session with the tool\\n    function getToolTypeProperties(\\n        uint256 toolType\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 maxStrength,\\n            uint256 strengthCost,\\n            uint256 miningDuration,\\n            uint256 energyCost\\n        );\\n\\n    /// @notice Returns the address of resource contract of a specific resource type\\n    /// @param resourceId The type of resource\\n    /// @return The address of resource contract of a specific resource type\\n    function getResourceAddress(\\n        uint256 resourceId\\n    ) external view returns (address);\\n\\n    /// @notice Returns the address of Artifacts contract\\n    /// @return The address of Artifacts contract\\n    function getArtifactsAddress() external view returns (address);\\n\\n    /// @notice Returns current strength of the tool\\n    /// @param user The address of the owner of the tool\\n    /// @param toolId The ID of the tool\\n    /// @return Current strength of the tool\\n    function getStrength(\\n        address user,\\n        uint256 toolId\\n    ) external view returns (uint256);\\n\\n    /// @notice Returns the address of Mining contract\\n    /// @return The address of Mining contract\\n    function getMiningAddress() external view returns (address);\\n\\n    /// @notice Returns the amount of types of resources\\n    /// @return The amount of types of resources\\n    function getResourcesTypesAmount() external view returns (uint256);\\n\\n    /// @notice Returns the amount of types of artifacts\\n    /// @return The amount of types of artifacts\\n    function getArtifactsTypesAmount() external view returns (uint256);\\n\\n    /// @notice Returns the amount of types of tools\\n    /// @return The amount of types of tools\\n    function getToolsTypesAmount() external view returns (uint256);\\n\\n    /// @notice Checks if user owns a tool with a given ID\\n    /// @param user The address of the user\\n    /// @param toolId The ID of the tool\\n    /// @return True if user owns a tool with a given ID. Otherwise - false\\n    function ownsTool(\\n        address user,\\n        uint256 toolId\\n    ) external view returns (bool);\\n\\n    /// @notice Changes addresses of resources\\n    /// @param resourceId The type of resource\\n    /// @param resourceAddress The new address of the resource\\n    function setResourceAddress(\\n        uint256 resourceId,\\n        address resourceAddress\\n    ) external;\\n\\n    /// @notice Adds a new tool.\\n    /// @param maxStrength The maximum strength of the tool\\n    /// @param miningDuration The duration of mining session with the tool\\n    /// @param energyCost The cost in Berry tokens to start mining session with the tool\\n    /// @param strengthCost The cost in tool strength to start mining session with it\\n    /// @param resourcesAmount Amount of Tree tokens requires to craft a tool\\n    /// @param artifactsAmounts Amounts of each type of artifacts to craft a tool\\n    /// @param newURI The URI of the tool\\n    /// @return The type of the new tool\\n    function addTool(\\n        uint32 maxStrength,\\n        uint32 miningDuration,\\n        uint256 energyCost,\\n        uint32 strengthCost,\\n        uint256 resourcesAmount,\\n        uint256[] calldata artifactsAmounts,\\n        string calldata newURI\\n    ) external returns (uint256);\\n\\n    /// @notice Changes properties of the tool\\n    /// @param toolType The type of the tool\\n    /// @param maxStrength The maximum strength of the tool\\n    /// @param miningDuration The duration of mining session with the tool\\n    /// @param energyCost The cost in Berry tokens to start mining session with the tool\\n    /// @param strengthCost The cost in tool strength to start mining session with it\\n    function setToolProperties(\\n        uint256 toolType,\\n        uint32 maxStrength,\\n        uint32 miningDuration,\\n        uint256 energyCost,\\n        uint32 strengthCost\\n    ) external;\\n\\n    /// @notice Crafts a new tools after it was added\\n    /// @param toolType The type of the tool\\n    function craft(uint256 toolType) external;\\n\\n    /// @notice Increases a number of types of artifacts by one\\n    function increaseArtifactsTypesAmount() external;\\n\\n    /// @notice Decreases tool's strength when mining\\n    /// @param user The user who is mining\\n    /// @param toolId The ID of the tool used for mining\\n    /// @param strengthCost The amount of tool's strength subtracted from current strength\\n    function corrupt(\\n        address user,\\n        uint256 toolId,\\n        uint256 strengthCost\\n    ) external;\\n\\n    /// @notice Changes address of Artifacts contract\\n    /// @param artifactsAddress The new address of Artifacts contract\\n    function setArtifactsAddress(address artifactsAddress) external;\\n\\n    /// @notice Changes address of Mining contract\\n    /// @param miningAddress The new address of Mining contract\\n    function setMiningAddress(address miningAddress) external;\\n\\n    /// @notice Pauses the contract if it's active. Activates it if it's paused\\n    function pause() external;\\n\\n    /// @notice Mints `amount` tools of `toolType` to `to`\\n    /// @param to The receiver of tools\\n    /// @param toolType The type of the tool\\n    /// @param amount The amount of tools to mint\\n    function mint(address to, uint128 toolType, uint256 amount) external;\\n\\n    /// @notice Mints batches of tools of different types to `to`\\n    /// @param to The receiver of tools\\n    /// @param toolTypes Types of tools\\n    /// @param amounts Amounts of tools\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata toolTypes,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    /// @notice Returns the recipe for the tool\\n    /// @param toolType The type of the tool\\n    /// @return resourcesAmount Amount of Tree resources to craft the tool\\n    /// @return artifactsAmounts Amounts of artifacts of different types to craft the tool\\n    function getRecipe(\\n        uint256 toolType\\n    )\\n        external\\n        view\\n        returns (uint256 resourcesAmount, uint256[] memory artifactsAmounts);\\n\\n    /// @notice Returns the URI of the tool type\\n    /// @param toolType The type of the tool\\n    /// @return The URI of the tool type\\n    function uri(uint256 toolType) external view returns (string memory);\\n\\n    /// @notice Changes the URI of the tool type\\n    /// @param toolType The type of the tool\\n    /// @param newURI The new URI\\n    function setURI(uint256 toolType, string calldata newURI) external;\\n\\n    /// @notice Changes the base URI for tools\\n    /// @param baseURI The new base URI\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    /// @notice Changes the recipe of the tool\\n    /// @param toolType The type of the tool\\n    /// @param resourcesAmount The new amount of Tree to craft the tool\\n    function setRecipe(\\n        uint256 toolType,\\n        uint256 resourcesAmount,\\n        uint256[] calldata artifactsAmounts\\n    ) external;\\n\\n    /// @notice Completely repairs the tool\\n    /// @param toolId The ID of the tool to repair\\n    function repairTool(uint256 toolId) external;\\n\\n    /// @notice Transfers a single tool with `toolId` from `from` to `to`\\n    /// @param from Sender of tokens\\n    /// @param to Receiver of tokens\\n    /// @param toolId The ID of the tool to transfer\\n    /// @param amount Always equals to 1\\n    /// @param data Extra data (optional)\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 toolId,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    /// @notice Transfers one tool of each `toolIds` from `from` to `to`\\n    /// @param from Sender of tokens\\n    /// @param to Receiver of tokens\\n    /// @param toolIds IDs of tools to transfer\\n    /// @param amounts Each amount always equals to 1\\n    /// @param data Extra data (optional)\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory toolIds,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x345286e6a58451d9ad0f8bd74f90af221b1904bf3fe71a409a1ca34a0ed3ed83\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612976806100206000396000f3fe608060405234801561001057600080fd5b506004361061011c5760003560e01c8062fdd58e1461012157806301ffc9a7146101475780630cac36b21461016a5780630e89341c1461017f5780632eb2c2d6146101925780634e1273f4146101a75780635c975abb146101c7578063715018a6146101d25780637477e129146101da578063782f08ae146101ed5780637bb7c0d814610200578063836a1040146102135780638456cb59146102265780638da5cb5b1461022e57806394cf7cd014610243578063a0bcfc7f14610256578063a22cb46514610269578063ac2a30101461027c578063d81d0a151461028f578063daa6c755146102a2578063e985e9c5146102aa578063f242432a146102e6578063f2fde38b146102f9575b600080fd5b61013461012f366004611bd2565b61030c565b6040519081526020015b60405180910390f35b61015a610155366004611c14565b6103a4565b604051901515815260200161013e565b6101726103f6565b60405161013e9190611c90565b61017261018d366004611ca3565b610488565b6101a56101a0366004611e05565b61054a565b005b6101ba6101b5366004611eb2565b610596565b60405161013e9190611fb9565b60c95460ff1661015a565b6101a56106bf565b6101a56101e8366004611fcc565b6106d3565b6101a56101fb366004612050565b6106e7565b6101a561020e36600461209b565b6106ff565b6101a56102213660046120fe565b610884565b6101a5610961565b610236610983565b60405161013e9190612136565b6101a561025136600461214a565b610992565b6101a5610264366004612167565b610a0c565b6101a56102773660046121b6565b610a22565b6101a561028a366004611bd2565b610a2d565b6101a561029d3660046121ef565b610bcf565b60fe54610134565b61015a6102b8366004612264565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205460ff1690565b6101a56102f4366004612292565b610d29565b6101a561030736600461214a565b610d6e565b60006001600160a01b03831661037c5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060009081526097602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806103d557506001600160e01b031982166303a24d0760e21b145b806103f057506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060fd8054610405906122fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610431906122fa565b801561047e5780601f106104535761010080835404028352916020019161047e565b820191906000526020600020905b81548152906001019060200180831161046157829003601f168201915b5050505050905090565b606060fe548211156104ac5760405162461bcd60e51b815260040161037390612335565b600082815260ff6020526040902080546104c5906122fa565b80601f01602080910402602001604051908101604052809291908181526020018280546104f1906122fa565b801561053e5780601f106105135761010080835404028352916020019161053e565b820191906000526020600020905b81548152906001019060200180831161052157829003601f168201915b50505050509050919050565b6001600160a01b038516331480610566575061056685336102b8565b6105825760405162461bcd60e51b81526004016103739061237b565b61058f8585858585610de4565b5050505050565b606081518351146105fb5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610373565b600083516001600160401b0381111561061657610616611cbc565b60405190808252806020026020018201604052801561063f578160200160208202803683370190505b50905060005b84518110156106b75761068a858281518110610663576106636123c9565b602002602001015185838151811061067d5761067d6123c9565b602002602001015161030c565b82828151811061069c5761069c6123c9565b60209081029190910101526106b0816123f5565b9050610645565b509392505050565b6106c7610f71565b6106d16000610fd0565b565b6106db610f71565b6106e481611022565b50565b6106ef610f71565b6106fa83838361111e565b505050565b600054610100900460ff161580801561071f5750600054600160ff909116105b80610740575061072e3061119a565b158015610740575060005460ff166001145b6107a35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610373565b6000805460ff1916600117905580156107c6576000805461ff0019166101001790555b60fc80546001600160a01b0319166001600160a01b03861617905582516107f49060fd906020860190611ab0565b5060fb80546001600160a01b0319166001600160a01b038416179055604080516020810190915260008152610828906111a9565b6108306111d9565b610838611208565b801561087e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b61088c610f71565b610894611237565b60fb54604051631846d2f560e31b815283916001600160a01b03169063c23697a8906108c4908490600401612136565b6020604051808303816000875af11580156108e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109079190612410565b156109245760405162461bcd60e51b81526004016103739061242d565b60fe548411156109465760405162461bcd60e51b815260040161037390612335565b61087e8385846040518060200160405280600081525061127d565b610969610f71565b60c95460ff1661097b576106d1611347565b6106d161139b565b6033546001600160a01b031690565b61099a610f71565b6001600160a01b0381166109ea5760405162461bcd60e51b81526020600482015260176024820152764172746966616374733a207a65726f206164647265737360481b6044820152606401610373565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b610a14610f71565b610a1e82826113d4565b5050565b610a1e33838361141e565b60fb54604051631846d2f560e31b815283916001600160a01b03169063c23697a890610a5d908490600401612136565b6020604051808303816000875af1158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa09190612410565b15610abd5760405162461bcd60e51b81526004016103739061242d565b60fc60009054906101000a90046001600160a01b03166001600160a01b03166343cac2b16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b349190612463565b6001600160a01b0316336001600160a01b031614610bb35760405162461bcd60e51b815260206004820152603660248201527f4172746966616374733a206f6e6c79206d696e696e6720636f6e74726163742060448201527531b0b71031b0b636103a3434b990333ab731ba34b7b760511b6064820152608401610373565b6106fa838360016040518060200160405280600081525061127d565b610bd7610f71565b610bdf611237565b60fb54604051631846d2f560e31b815284916001600160a01b03169063c23697a890610c0f908490600401612136565b6020604051808303816000875af1158015610c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c529190612410565b15610c6f5760405162461bcd60e51b81526004016103739061242d565b60005b8351811015610d0d5760fe54848281518110610c9057610c906123c9565b60200260200101511115610cfb5760405162461bcd60e51b815260206004820152602c60248201527f4172746966616374733a2074686973206172746966616374207479706520646f60448201526b65736e27742065786973747360a01b6064820152608401610373565b80610d05816123f5565b915050610c72565b5061087e848484604051806020016040528060008152506114ff565b6001600160a01b038516331480610d455750610d4585336102b8565b610d615760405162461bcd60e51b81526004016103739061237b565b61058f8585858585611639565b610d76610f71565b6001600160a01b038116610ddb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610373565b6106e481610fd0565b8151835114610e055760405162461bcd60e51b815260040161037390612480565b6001600160a01b038416610e2b5760405162461bcd60e51b8152600401610373906124c8565b3360005b8451811015610f15576000858281518110610e4c57610e4c6123c9565b602002602001015190506000858381518110610e6a57610e6a6123c9565b60209081029190910181015160008481526097835260408082206001600160a01b038e168352909352919091205490915081811015610ebb5760405162461bcd60e51b81526004016103739061250d565b60008381526097602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610efa908490612557565b9250508190555050505080610f0e906123f5565b9050610e2f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03166000805160206129018339815191528787604051610f5392919061256f565b60405180910390a4610f69818787878787611755565b505050505050565b33610f7a610983565b6001600160a01b0316146106d15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610373565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600160fe60008282546110359190612557565b909155505060fc546040805163b1ec71db60e01b815290516001600160a01b039092169163b1ec71db9160048082019260009290919082900301818387803b15801561108057600080fd5b505af1158015611094573d6000803e3d6000fd5b5050505060fd816040516020016110ac9291906125b9565b60408051601f1981840301815291815260fe54600090815260ff602090815291902082516110df93919290910190611ab0565b507fe10fc2a3081e455a43ed79685987459ed559f0db7550c05581ce2a8cc342138c60fe5482604051611113929190612657565b60405180910390a150565b60fe548311156111405760405162461bcd60e51b815260040161037390612335565b600083815260ff60205260409020611159908383611b34565b507f727278078475575154367bc16a7a4b8594316c9855643162a77c49ebdd8d2b0883838360405161118d93929190612699565b60405180910390a1505050565b6001600160a01b03163b151590565b600054610100900460ff166111d05760405162461bcd60e51b8152600401610373906126b3565b6106e4816118b8565b600054610100900460ff166112005760405162461bcd60e51b8152600401610373906126b3565b6106d16118e8565b600054610100900460ff1661122f5760405162461bcd60e51b8152600401610373906126b3565b6106d1611918565b60c95460ff16156106d15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610373565b6001600160a01b0384166112a35760405162461bcd60e51b8152600401610373906126fe565b3360006112af8561194b565b905060006112bc8561194b565b905060008681526097602090815260408083206001600160a01b038b168452909152812080548792906112f0908490612557565b909155505060408051878152602081018790526001600160a01b03808a169260009291871691600080516020612921833981519152910160405180910390a461133e83600089898989611996565b50505050505050565b61134f611237565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113843390565b6040516113919190612136565b60405180910390a1565b6113a3611a58565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611384565b6113e060fd8383611b34565b507f87cdeaffd8e70903d6ce7cc983fac3b09ca79e83818124c98e47a1d70f8027d6828260405161141292919061273f565b60405180910390a15050565b816001600160a01b0316836001600160a01b031614156114925760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610373565b6001600160a01b03838116600081815260986020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166115255760405162461bcd60e51b8152600401610373906126fe565b81518351146115465760405162461bcd60e51b815260040161037390612480565b3360005b84518110156115e357838181518110611565576115656123c9565b602002602001015160976000878481518110611583576115836123c9565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546115cb9190612557565b909155508190506115db816123f5565b91505061154a565b50846001600160a01b031660006001600160a01b0316826001600160a01b0316600080516020612901833981519152878760405161162292919061256f565b60405180910390a461058f81600087878787611755565b6001600160a01b03841661165f5760405162461bcd60e51b8152600401610373906124c8565b33600061166b8561194b565b905060006116788561194b565b905060008681526097602090815260408083206001600160a01b038c168452909152902054858110156116bd5760405162461bcd60e51b81526004016103739061250d565b60008781526097602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906116fc908490612557565b909155505060408051888152602081018890526001600160a01b03808b16928c82169291881691600080516020612921833981519152910160405180910390a461174a848a8a8a8a8a611996565b505050505050505050565b611767846001600160a01b031661119a565b15610f695760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906117a09089908990889088908890600401612753565b6020604051808303816000875af19250505080156117db575060408051601f3d908101601f191682019092526117d8918101906127b1565b60015b611888576117e76127ce565b806308c379a0141561182157506117fc6127ea565b806118075750611823565b8060405162461bcd60e51b81526004016103739190611c90565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610373565b6001600160e01b0319811663bc197c8160e01b1461133e5760405162461bcd60e51b815260040161037390612873565b600054610100900460ff166118df5760405162461bcd60e51b8152600401610373906126b3565b6106e481611aa1565b600054610100900460ff1661190f5760405162461bcd60e51b8152600401610373906126b3565b6106d133610fd0565b600054610100900460ff1661193f5760405162461bcd60e51b8152600401610373906126b3565b60c9805460ff19169055565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611985576119856123c9565b602090810291909101015292915050565b6119a8846001600160a01b031661119a565b15610f695760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906119e190899089908890889088906004016128bb565b6020604051808303816000875af1925050508015611a1c575060408051601f3d908101601f19168201909252611a19918101906127b1565b60015b611a28576117e76127ce565b6001600160e01b0319811663f23a6e6160e01b1461133e5760405162461bcd60e51b815260040161037390612873565b60c95460ff166106d15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610373565b8051610a1e9060999060208401905b828054611abc906122fa565b90600052602060002090601f016020900481019282611ade5760008555611b24565b82601f10611af757805160ff1916838001178555611b24565b82800160010185558215611b24579182015b82811115611b24578251825591602001919060010190611b09565b50611b30929150611ba8565b5090565b828054611b40906122fa565b90600052602060002090601f016020900481019282611b625760008555611b24565b82601f10611b7b5782800160ff19823516178555611b24565b82800160010185558215611b24579182015b82811115611b24578235825591602001919060010190611b8d565b5b80821115611b305760008155600101611ba9565b6001600160a01b03811681146106e457600080fd5b60008060408385031215611be557600080fd5b8235611bf081611bbd565b946020939093013593505050565b6001600160e01b0319811681146106e457600080fd5b600060208284031215611c2657600080fd5b8135611c3181611bfe565b9392505050565b60005b83811015611c53578181015183820152602001611c3b565b8381111561087e5750506000910152565b60008151808452611c7c816020860160208601611c38565b601f01601f19169290920160200192915050565b602081526000611c316020830184611c64565b600060208284031215611cb557600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611cf757611cf7611cbc565b6040525050565b60006001600160401b03821115611d1757611d17611cbc565b5060051b60200190565b600082601f830112611d3257600080fd5b81356020611d3f82611cfe565b604051611d4c8282611cd2565b83815260059390931b8501820192828101915086841115611d6c57600080fd5b8286015b84811015611d875780358352918301918301611d70565b509695505050505050565b600082601f830112611da357600080fd5b81356001600160401b03811115611dbc57611dbc611cbc565b604051611dd3601f8301601f191660200182611cd2565b818152846020838601011115611de857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611e1d57600080fd5b8535611e2881611bbd565b94506020860135611e3881611bbd565b935060408601356001600160401b0380821115611e5457600080fd5b611e6089838a01611d21565b94506060880135915080821115611e7657600080fd5b611e8289838a01611d21565b93506080880135915080821115611e9857600080fd5b50611ea588828901611d92565b9150509295509295909350565b60008060408385031215611ec557600080fd5b82356001600160401b0380821115611edc57600080fd5b818501915085601f830112611ef057600080fd5b81356020611efd82611cfe565b604051611f0a8282611cd2565b83815260059390931b8501820192828101915089841115611f2a57600080fd5b948201945b83861015611f51578535611f4281611bbd565b82529482019490820190611f2f565b96505086013592505080821115611f6757600080fd5b50611f7485828601611d21565b9150509250929050565b600081518084526020808501945080840160005b83811015611fae57815187529582019590820190600101611f92565b509495945050505050565b602081526000611c316020830184611f7e565b600060208284031215611fde57600080fd5b81356001600160401b03811115611ff457600080fd5b61200084828501611d92565b949350505050565b60008083601f84011261201a57600080fd5b5081356001600160401b0381111561203157600080fd5b60208301915083602082850101111561204957600080fd5b9250929050565b60008060006040848603121561206557600080fd5b8335925060208401356001600160401b0381111561208257600080fd5b61208e86828701612008565b9497909650939450505050565b6000806000606084860312156120b057600080fd5b83356120bb81611bbd565b925060208401356001600160401b038111156120d657600080fd5b6120e286828701611d92565b92505060408401356120f381611bbd565b809150509250925092565b60008060006060848603121561211357600080fd5b83359250602084013561212581611bbd565b929592945050506040919091013590565b6001600160a01b0391909116815260200190565b60006020828403121561215c57600080fd5b8135611c3181611bbd565b6000806020838503121561217a57600080fd5b82356001600160401b0381111561219057600080fd5b61219c85828601612008565b90969095509350505050565b80151581146106e457600080fd5b600080604083850312156121c957600080fd5b82356121d481611bbd565b915060208301356121e4816121a8565b809150509250929050565b60008060006060848603121561220457600080fd5b833561220f81611bbd565b925060208401356001600160401b038082111561222b57600080fd5b61223787838801611d21565b9350604086013591508082111561224d57600080fd5b5061225a86828701611d21565b9150509250925092565b6000806040838503121561227757600080fd5b823561228281611bbd565b915060208301356121e481611bbd565b600080600080600060a086880312156122aa57600080fd5b85356122b581611bbd565b945060208601356122c581611bbd565b9350604086013592506060860135915060808601356001600160401b038111156122ee57600080fd5b611ea588828901611d92565b600181811c9082168061230e57607f821691505b6020821081141561232f57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526026908201527f4172746966616374733a205468697320617274696661637420646f65736e277460408201526508195e1a5cdd60d21b606082015260800190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612409576124096123df565b5060010190565b60006020828403121561242257600080fd5b8151611c31816121a8565b6020808252601c908201527b105c9d1a599858dd1cce881d5cd95c881a5b88189b1858dadb1a5cdd60221b604082015260600190565b60006020828403121561247557600080fd5b8151611c3181611bbd565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6000821982111561256a5761256a6123df565b500190565b6040815260006125826040830185611f7e565b82810360208401526125948185611f7e565b95945050505050565b600081516125af818560208601611c38565b9290920192915050565b600080845481600182811c9150808316806125d557607f831692505b60208084108214156125f557634e487b7160e01b86526022600452602486fd5b818015612609576001811461261a57612647565b60ff19861689528489019650612647565b60008b81526020902060005b8681101561263f5781548b820152908501908301612626565b505084890196505b505050505050612594818561259d565b8281526040602082015260006120006040830184611c64565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000612594604083018486612670565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b602081526000612000602083018486612670565b6001600160a01b0386811682528516602082015260a06040820181905260009061277f90830186611f7e565b82810360608401526127918186611f7e565b905082810360808401526127a58185611c64565b98975050505050505050565b6000602082840312156127c357600080fd5b8151611c3181611bfe565b600060033d11156127e75760046000803e5060005160e01c5b90565b600060443d10156127f85790565b6040516003193d81016004833e81513d6001600160401b03808311602484018310171561282757505050505090565b828501915081518181111561283f5750505050505090565b843d87010160208285010111156128595750505050505090565b61286860208286010187611cd2565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906128f590830184611c64565b97965050505050505056fe4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fbc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a2646970667358221220b9178146cac14625c61e07e165085f18d25b1928c5440e4176be432326c5290564736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011c5760003560e01c8062fdd58e1461012157806301ffc9a7146101475780630cac36b21461016a5780630e89341c1461017f5780632eb2c2d6146101925780634e1273f4146101a75780635c975abb146101c7578063715018a6146101d25780637477e129146101da578063782f08ae146101ed5780637bb7c0d814610200578063836a1040146102135780638456cb59146102265780638da5cb5b1461022e57806394cf7cd014610243578063a0bcfc7f14610256578063a22cb46514610269578063ac2a30101461027c578063d81d0a151461028f578063daa6c755146102a2578063e985e9c5146102aa578063f242432a146102e6578063f2fde38b146102f9575b600080fd5b61013461012f366004611bd2565b61030c565b6040519081526020015b60405180910390f35b61015a610155366004611c14565b6103a4565b604051901515815260200161013e565b6101726103f6565b60405161013e9190611c90565b61017261018d366004611ca3565b610488565b6101a56101a0366004611e05565b61054a565b005b6101ba6101b5366004611eb2565b610596565b60405161013e9190611fb9565b60c95460ff1661015a565b6101a56106bf565b6101a56101e8366004611fcc565b6106d3565b6101a56101fb366004612050565b6106e7565b6101a561020e36600461209b565b6106ff565b6101a56102213660046120fe565b610884565b6101a5610961565b610236610983565b60405161013e9190612136565b6101a561025136600461214a565b610992565b6101a5610264366004612167565b610a0c565b6101a56102773660046121b6565b610a22565b6101a561028a366004611bd2565b610a2d565b6101a561029d3660046121ef565b610bcf565b60fe54610134565b61015a6102b8366004612264565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205460ff1690565b6101a56102f4366004612292565b610d29565b6101a561030736600461214a565b610d6e565b60006001600160a01b03831661037c5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060009081526097602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806103d557506001600160e01b031982166303a24d0760e21b145b806103f057506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060fd8054610405906122fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610431906122fa565b801561047e5780601f106104535761010080835404028352916020019161047e565b820191906000526020600020905b81548152906001019060200180831161046157829003601f168201915b5050505050905090565b606060fe548211156104ac5760405162461bcd60e51b815260040161037390612335565b600082815260ff6020526040902080546104c5906122fa565b80601f01602080910402602001604051908101604052809291908181526020018280546104f1906122fa565b801561053e5780601f106105135761010080835404028352916020019161053e565b820191906000526020600020905b81548152906001019060200180831161052157829003601f168201915b50505050509050919050565b6001600160a01b038516331480610566575061056685336102b8565b6105825760405162461bcd60e51b81526004016103739061237b565b61058f8585858585610de4565b5050505050565b606081518351146105fb5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610373565b600083516001600160401b0381111561061657610616611cbc565b60405190808252806020026020018201604052801561063f578160200160208202803683370190505b50905060005b84518110156106b75761068a858281518110610663576106636123c9565b602002602001015185838151811061067d5761067d6123c9565b602002602001015161030c565b82828151811061069c5761069c6123c9565b60209081029190910101526106b0816123f5565b9050610645565b509392505050565b6106c7610f71565b6106d16000610fd0565b565b6106db610f71565b6106e481611022565b50565b6106ef610f71565b6106fa83838361111e565b505050565b600054610100900460ff161580801561071f5750600054600160ff909116105b80610740575061072e3061119a565b158015610740575060005460ff166001145b6107a35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610373565b6000805460ff1916600117905580156107c6576000805461ff0019166101001790555b60fc80546001600160a01b0319166001600160a01b03861617905582516107f49060fd906020860190611ab0565b5060fb80546001600160a01b0319166001600160a01b038416179055604080516020810190915260008152610828906111a9565b6108306111d9565b610838611208565b801561087e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b61088c610f71565b610894611237565b60fb54604051631846d2f560e31b815283916001600160a01b03169063c23697a8906108c4908490600401612136565b6020604051808303816000875af11580156108e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109079190612410565b156109245760405162461bcd60e51b81526004016103739061242d565b60fe548411156109465760405162461bcd60e51b815260040161037390612335565b61087e8385846040518060200160405280600081525061127d565b610969610f71565b60c95460ff1661097b576106d1611347565b6106d161139b565b6033546001600160a01b031690565b61099a610f71565b6001600160a01b0381166109ea5760405162461bcd60e51b81526020600482015260176024820152764172746966616374733a207a65726f206164647265737360481b6044820152606401610373565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b610a14610f71565b610a1e82826113d4565b5050565b610a1e33838361141e565b60fb54604051631846d2f560e31b815283916001600160a01b03169063c23697a890610a5d908490600401612136565b6020604051808303816000875af1158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa09190612410565b15610abd5760405162461bcd60e51b81526004016103739061242d565b60fc60009054906101000a90046001600160a01b03166001600160a01b03166343cac2b16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b349190612463565b6001600160a01b0316336001600160a01b031614610bb35760405162461bcd60e51b815260206004820152603660248201527f4172746966616374733a206f6e6c79206d696e696e6720636f6e74726163742060448201527531b0b71031b0b636103a3434b990333ab731ba34b7b760511b6064820152608401610373565b6106fa838360016040518060200160405280600081525061127d565b610bd7610f71565b610bdf611237565b60fb54604051631846d2f560e31b815284916001600160a01b03169063c23697a890610c0f908490600401612136565b6020604051808303816000875af1158015610c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c529190612410565b15610c6f5760405162461bcd60e51b81526004016103739061242d565b60005b8351811015610d0d5760fe54848281518110610c9057610c906123c9565b60200260200101511115610cfb5760405162461bcd60e51b815260206004820152602c60248201527f4172746966616374733a2074686973206172746966616374207479706520646f60448201526b65736e27742065786973747360a01b6064820152608401610373565b80610d05816123f5565b915050610c72565b5061087e848484604051806020016040528060008152506114ff565b6001600160a01b038516331480610d455750610d4585336102b8565b610d615760405162461bcd60e51b81526004016103739061237b565b61058f8585858585611639565b610d76610f71565b6001600160a01b038116610ddb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610373565b6106e481610fd0565b8151835114610e055760405162461bcd60e51b815260040161037390612480565b6001600160a01b038416610e2b5760405162461bcd60e51b8152600401610373906124c8565b3360005b8451811015610f15576000858281518110610e4c57610e4c6123c9565b602002602001015190506000858381518110610e6a57610e6a6123c9565b60209081029190910181015160008481526097835260408082206001600160a01b038e168352909352919091205490915081811015610ebb5760405162461bcd60e51b81526004016103739061250d565b60008381526097602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610efa908490612557565b9250508190555050505080610f0e906123f5565b9050610e2f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03166000805160206129018339815191528787604051610f5392919061256f565b60405180910390a4610f69818787878787611755565b505050505050565b33610f7a610983565b6001600160a01b0316146106d15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610373565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600160fe60008282546110359190612557565b909155505060fc546040805163b1ec71db60e01b815290516001600160a01b039092169163b1ec71db9160048082019260009290919082900301818387803b15801561108057600080fd5b505af1158015611094573d6000803e3d6000fd5b5050505060fd816040516020016110ac9291906125b9565b60408051601f1981840301815291815260fe54600090815260ff602090815291902082516110df93919290910190611ab0565b507fe10fc2a3081e455a43ed79685987459ed559f0db7550c05581ce2a8cc342138c60fe5482604051611113929190612657565b60405180910390a150565b60fe548311156111405760405162461bcd60e51b815260040161037390612335565b600083815260ff60205260409020611159908383611b34565b507f727278078475575154367bc16a7a4b8594316c9855643162a77c49ebdd8d2b0883838360405161118d93929190612699565b60405180910390a1505050565b6001600160a01b03163b151590565b600054610100900460ff166111d05760405162461bcd60e51b8152600401610373906126b3565b6106e4816118b8565b600054610100900460ff166112005760405162461bcd60e51b8152600401610373906126b3565b6106d16118e8565b600054610100900460ff1661122f5760405162461bcd60e51b8152600401610373906126b3565b6106d1611918565b60c95460ff16156106d15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610373565b6001600160a01b0384166112a35760405162461bcd60e51b8152600401610373906126fe565b3360006112af8561194b565b905060006112bc8561194b565b905060008681526097602090815260408083206001600160a01b038b168452909152812080548792906112f0908490612557565b909155505060408051878152602081018790526001600160a01b03808a169260009291871691600080516020612921833981519152910160405180910390a461133e83600089898989611996565b50505050505050565b61134f611237565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113843390565b6040516113919190612136565b60405180910390a1565b6113a3611a58565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611384565b6113e060fd8383611b34565b507f87cdeaffd8e70903d6ce7cc983fac3b09ca79e83818124c98e47a1d70f8027d6828260405161141292919061273f565b60405180910390a15050565b816001600160a01b0316836001600160a01b031614156114925760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610373565b6001600160a01b03838116600081815260986020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166115255760405162461bcd60e51b8152600401610373906126fe565b81518351146115465760405162461bcd60e51b815260040161037390612480565b3360005b84518110156115e357838181518110611565576115656123c9565b602002602001015160976000878481518110611583576115836123c9565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546115cb9190612557565b909155508190506115db816123f5565b91505061154a565b50846001600160a01b031660006001600160a01b0316826001600160a01b0316600080516020612901833981519152878760405161162292919061256f565b60405180910390a461058f81600087878787611755565b6001600160a01b03841661165f5760405162461bcd60e51b8152600401610373906124c8565b33600061166b8561194b565b905060006116788561194b565b905060008681526097602090815260408083206001600160a01b038c168452909152902054858110156116bd5760405162461bcd60e51b81526004016103739061250d565b60008781526097602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906116fc908490612557565b909155505060408051888152602081018890526001600160a01b03808b16928c82169291881691600080516020612921833981519152910160405180910390a461174a848a8a8a8a8a611996565b505050505050505050565b611767846001600160a01b031661119a565b15610f695760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906117a09089908990889088908890600401612753565b6020604051808303816000875af19250505080156117db575060408051601f3d908101601f191682019092526117d8918101906127b1565b60015b611888576117e76127ce565b806308c379a0141561182157506117fc6127ea565b806118075750611823565b8060405162461bcd60e51b81526004016103739190611c90565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610373565b6001600160e01b0319811663bc197c8160e01b1461133e5760405162461bcd60e51b815260040161037390612873565b600054610100900460ff166118df5760405162461bcd60e51b8152600401610373906126b3565b6106e481611aa1565b600054610100900460ff1661190f5760405162461bcd60e51b8152600401610373906126b3565b6106d133610fd0565b600054610100900460ff1661193f5760405162461bcd60e51b8152600401610373906126b3565b60c9805460ff19169055565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611985576119856123c9565b602090810291909101015292915050565b6119a8846001600160a01b031661119a565b15610f695760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906119e190899089908890889088906004016128bb565b6020604051808303816000875af1925050508015611a1c575060408051601f3d908101601f19168201909252611a19918101906127b1565b60015b611a28576117e76127ce565b6001600160e01b0319811663f23a6e6160e01b1461133e5760405162461bcd60e51b815260040161037390612873565b60c95460ff166106d15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610373565b8051610a1e9060999060208401905b828054611abc906122fa565b90600052602060002090601f016020900481019282611ade5760008555611b24565b82601f10611af757805160ff1916838001178555611b24565b82800160010185558215611b24579182015b82811115611b24578251825591602001919060010190611b09565b50611b30929150611ba8565b5090565b828054611b40906122fa565b90600052602060002090601f016020900481019282611b625760008555611b24565b82601f10611b7b5782800160ff19823516178555611b24565b82800160010185558215611b24579182015b82811115611b24578235825591602001919060010190611b8d565b5b80821115611b305760008155600101611ba9565b6001600160a01b03811681146106e457600080fd5b60008060408385031215611be557600080fd5b8235611bf081611bbd565b946020939093013593505050565b6001600160e01b0319811681146106e457600080fd5b600060208284031215611c2657600080fd5b8135611c3181611bfe565b9392505050565b60005b83811015611c53578181015183820152602001611c3b565b8381111561087e5750506000910152565b60008151808452611c7c816020860160208601611c38565b601f01601f19169290920160200192915050565b602081526000611c316020830184611c64565b600060208284031215611cb557600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611cf757611cf7611cbc565b6040525050565b60006001600160401b03821115611d1757611d17611cbc565b5060051b60200190565b600082601f830112611d3257600080fd5b81356020611d3f82611cfe565b604051611d4c8282611cd2565b83815260059390931b8501820192828101915086841115611d6c57600080fd5b8286015b84811015611d875780358352918301918301611d70565b509695505050505050565b600082601f830112611da357600080fd5b81356001600160401b03811115611dbc57611dbc611cbc565b604051611dd3601f8301601f191660200182611cd2565b818152846020838601011115611de857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611e1d57600080fd5b8535611e2881611bbd565b94506020860135611e3881611bbd565b935060408601356001600160401b0380821115611e5457600080fd5b611e6089838a01611d21565b94506060880135915080821115611e7657600080fd5b611e8289838a01611d21565b93506080880135915080821115611e9857600080fd5b50611ea588828901611d92565b9150509295509295909350565b60008060408385031215611ec557600080fd5b82356001600160401b0380821115611edc57600080fd5b818501915085601f830112611ef057600080fd5b81356020611efd82611cfe565b604051611f0a8282611cd2565b83815260059390931b8501820192828101915089841115611f2a57600080fd5b948201945b83861015611f51578535611f4281611bbd565b82529482019490820190611f2f565b96505086013592505080821115611f6757600080fd5b50611f7485828601611d21565b9150509250929050565b600081518084526020808501945080840160005b83811015611fae57815187529582019590820190600101611f92565b509495945050505050565b602081526000611c316020830184611f7e565b600060208284031215611fde57600080fd5b81356001600160401b03811115611ff457600080fd5b61200084828501611d92565b949350505050565b60008083601f84011261201a57600080fd5b5081356001600160401b0381111561203157600080fd5b60208301915083602082850101111561204957600080fd5b9250929050565b60008060006040848603121561206557600080fd5b8335925060208401356001600160401b0381111561208257600080fd5b61208e86828701612008565b9497909650939450505050565b6000806000606084860312156120b057600080fd5b83356120bb81611bbd565b925060208401356001600160401b038111156120d657600080fd5b6120e286828701611d92565b92505060408401356120f381611bbd565b809150509250925092565b60008060006060848603121561211357600080fd5b83359250602084013561212581611bbd565b929592945050506040919091013590565b6001600160a01b0391909116815260200190565b60006020828403121561215c57600080fd5b8135611c3181611bbd565b6000806020838503121561217a57600080fd5b82356001600160401b0381111561219057600080fd5b61219c85828601612008565b90969095509350505050565b80151581146106e457600080fd5b600080604083850312156121c957600080fd5b82356121d481611bbd565b915060208301356121e4816121a8565b809150509250929050565b60008060006060848603121561220457600080fd5b833561220f81611bbd565b925060208401356001600160401b038082111561222b57600080fd5b61223787838801611d21565b9350604086013591508082111561224d57600080fd5b5061225a86828701611d21565b9150509250925092565b6000806040838503121561227757600080fd5b823561228281611bbd565b915060208301356121e481611bbd565b600080600080600060a086880312156122aa57600080fd5b85356122b581611bbd565b945060208601356122c581611bbd565b9350604086013592506060860135915060808601356001600160401b038111156122ee57600080fd5b611ea588828901611d92565b600181811c9082168061230e57607f821691505b6020821081141561232f57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526026908201527f4172746966616374733a205468697320617274696661637420646f65736e277460408201526508195e1a5cdd60d21b606082015260800190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612409576124096123df565b5060010190565b60006020828403121561242257600080fd5b8151611c31816121a8565b6020808252601c908201527b105c9d1a599858dd1cce881d5cd95c881a5b88189b1858dadb1a5cdd60221b604082015260600190565b60006020828403121561247557600080fd5b8151611c3181611bbd565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6000821982111561256a5761256a6123df565b500190565b6040815260006125826040830185611f7e565b82810360208401526125948185611f7e565b95945050505050565b600081516125af818560208601611c38565b9290920192915050565b600080845481600182811c9150808316806125d557607f831692505b60208084108214156125f557634e487b7160e01b86526022600452602486fd5b818015612609576001811461261a57612647565b60ff19861689528489019650612647565b60008b81526020902060005b8681101561263f5781548b820152908501908301612626565b505084890196505b505050505050612594818561259d565b8281526040602082015260006120006040830184611c64565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000612594604083018486612670565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b602081526000612000602083018486612670565b6001600160a01b0386811682528516602082015260a06040820181905260009061277f90830186611f7e565b82810360608401526127918186611f7e565b905082810360808401526127a58185611c64565b98975050505050505050565b6000602082840312156127c357600080fd5b8151611c3181611bfe565b600060033d11156127e75760046000803e5060005160e01c5b90565b600060443d10156127f85790565b6040516003193d81016004833e81513d6001600160401b03808311602484018310171561282757505050505090565b828501915081518181111561283f5750505050505090565b843d87010160208285010111156128595750505050505090565b61286860208286010187611cd2565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906128f590830184611c64565b97965050505050505056fe4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fbc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a2646970667358221220b9178146cac14625c61e07e165085f18d25b1928c5440e4176be432326c5290564736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_artifactTypes": {
        "details": "Number of types of artifactsStarts with 0"
      },
      "_baseURI": {
        "details": "Base URI for IPFS"
      },
      "_blacklist": {
        "details": "The address of the Blacklist contract"
      },
      "_tools": {
        "details": "The address of the Tools contract"
      },
      "_typesToUris": {
        "details": "Mapping from artifact type to it's URI"
      }
    },
    "title": "Artifact tokens can be aquired during mining        Artifacts are used to craft tools",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNewArtifact(string)": {
        "notice": "See {IArtifacts-addNewArtifact}"
      },
      "getArtifactsTypesAmount()": {
        "notice": "See {IArtifacts-getArtifactsTypesAmount}"
      },
      "getBaseUri()": {
        "notice": "See {IArtifacts-getBaseUri}"
      },
      "lootArtifact(address,uint256)": {
        "notice": "See {IArtifacts-lootArtifact}"
      },
      "mint(uint256,address,uint256)": {
        "notice": "See {IArtifacts-mint}"
      },
      "mintBatch(address,uint256[],uint256[])": {
        "notice": "See {IArtifacts-mintBatch}"
      },
      "pause()": {
        "notice": "See {IArtifacts-pause}"
      },
      "setBaseUri(string)": {
        "notice": "See {IArtifacts-setBaseUri}"
      },
      "setToolsAddress(address)": {
        "notice": "See {IArtifacts-setToolsAddress}"
      },
      "setUri(uint256,string)": {
        "notice": "See {IArtifacts-setUri}"
      },
      "uri(uint256)": {
        "notice": "See {IArtifacts-uri}"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2221,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2265,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 456,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_balances",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 462,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 464,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_uri",
        "offset": 0,
        "slot": "153",
        "type": "t_string_storage"
      },
      {
        "astId": 1671,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3170,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_blacklist",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IBlackList)6158"
      },
      {
        "astId": 3174,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_tools",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(ITools)6645"
      },
      {
        "astId": 3177,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_baseURI",
        "offset": 0,
        "slot": "253",
        "type": "t_string_storage"
      },
      {
        "astId": 3180,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_artifactTypes",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 3185,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_typesToUris",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBlackList)6158": {
        "encoding": "inplace",
        "label": "contract IBlackList",
        "numberOfBytes": "20"
      },
      "t_contract(ITools)6645": {
        "encoding": "inplace",
        "label": "contract ITools",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}