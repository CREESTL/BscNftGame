{
  "address": "0x84c2C5Cb20B1a5C87c226f27CCd7f1fa8724d329",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "AddNewArtifact",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "BaseUriChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "UriChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addNewArtifact",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArtifactsTypesAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toolsContractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_baseUrl",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_blackListContractAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "artifactType",
          "type": "uint256"
        }
      ],
      "name": "lootArtifact",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "artifactType",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseUri",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toolsAddress",
          "type": "address"
        }
      ],
      "name": "setToolsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "artifactType",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "setUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "artifactType",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb1cc2d237ab14bbcf65d17cc5b1150c55d2837b90cb014ccdaf43e8eae8eb78",
  "receipt": {
    "to": null,
    "from": "0xa842a38CD758f8dE8537C5CBcB2006DB0250eC7C",
    "contractAddress": "0x84c2C5Cb20B1a5C87c226f27CCd7f1fa8724d329",
    "transactionIndex": 2,
    "gasUsed": "2387186",
    "logsBloom": "0x
    "blockHash": "0xb48fff303c99a295b940111e291d2a103abe46c7c23b2b0cc2fb4bcb92012653",
    "transactionHash": "0xcb1cc2d237ab14bbcf65d17cc5b1150c55d2837b90cb014ccdaf43e8eae8eb78",
    "logs": [],
    "blockNumber": 31525632,
    "cumulativeGasUsed": "2760581",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "63392786ebe349abfa2cdd2e3c441e37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AddNewArtifact\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"BaseUriChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"UriChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addNewArtifact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArtifactsTypesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toolsContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_baseUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_blackListContractAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"artifactType\",\"type\":\"uint256\"}],\"name\":\"lootArtifact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artifactType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toolsAddress\",\"type\":\"address\"}],\"name\":\"setToolsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artifactType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artifactType\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Artifacts.sol\":\"Artifacts\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xe9208ac0602174f0ed30fb10c6292193308424dfa375a8270027d65878d4a812\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/Artifacts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./interfaces/IBlackList.sol\\\";\\nimport \\\"./interfaces/IArtifacts.sol\\\";\\nimport \\\"./interfaces/ITools.sol\\\";\\n\\ncontract Artifacts is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ERC1155Upgradeable,\\n    IArtifacts,\\n    PausableUpgradeable\\n{\\n    IBlackList private _blacklist;\\n    ITools private _tools;\\n\\n    string private _baseURI;\\n    uint256 private _artifactTypes;\\n\\n    mapping(uint256 => string) _typesToUris;\\n\\n    event AddNewArtifact(uint256);\\n    event BaseUriChanged(string);\\n    event UriChanged(uint256, string);\\n\\n    modifier isInBlacklist(address user) {\\n        require(!_blacklist.check(user), \\\"Artifacts: user in blacklist\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _toolsContractAddress,\\n        string memory _baseUrl,\\n        address _blackListContractAddress\\n    ) public initializer {\\n        _tools = ITools(_toolsContractAddress);\\n        _baseURI = _baseUrl;\\n        _blacklist = IBlackList(_blackListContractAddress);\\n\\n        __ERC1155_init(\\\"\\\");\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n\\n    function mint(\\n        uint256 artifactType,\\n        address to,\\n        uint256 amount,\\n        bytes memory data\\n    ) external onlyOwner whenNotPaused isInBlacklist(to) {\\n        require(\\n            artifactType <= _artifactTypes,\\n            \\\"Artifacts: This artifact doesn't exist\\\"\\n        );\\n        _mint(to, artifactType, amount, data);\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external onlyOwner whenNotPaused isInBlacklist(to) {\\n        for (uint256 counter = 0; counter < ids.length; counter++) {\\n            require(\\n                ids[counter] <= _artifactTypes,\\n                \\\"Artifacts: this artifact type doesn't exists\\\"\\n            );\\n        }\\n\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function lootArtifact(address user, uint256 artifactType) external {\\n        require(\\n            _msgSender() == _tools.getMiningAddress(),\\n            \\\"Artifacts: only mining contract can call this function\\\"\\n        );\\n        _mint(user, artifactType, 1, \\\"\\\");\\n    }\\n\\n    // ----------------------------\\n    // administration\\n    function pause() external onlyOwner {\\n        if (!paused()) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    function addNewArtifact() public onlyOwner {\\n        _addNewArtifact();\\n    }\\n\\n    function setToolsAddress(address toolsAddress) external onlyOwner {\\n        require(toolsAddress != address(0), \\\"Artifacts: zero address\\\");\\n        _tools = ITools(toolsAddress);\\n    }\\n\\n    function getBaseUri() external view returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    function setBaseUri(string calldata newBaseUri) external onlyOwner {\\n        _setBaseUri(newBaseUri);\\n    }\\n\\n    function setUri(\\n        uint256 artifactType,\\n        string calldata newUri\\n    ) external onlyOwner {\\n        _setUri(artifactType, newUri);\\n    }\\n\\n    function uri(\\n        uint256 artifactType\\n    ) public view override returns (string memory) {\\n        require(\\n            artifactType <= _artifactTypes,\\n            \\\"Artifacts: This artifact doesn't exist\\\"\\n        );\\n        return _typesToUris[artifactType];\\n    }\\n\\n    function getArtifactsTypesAmount() external view returns (uint256) {\\n        return _artifactTypes;\\n    }\\n\\n    function _addNewArtifact() private {\\n        _artifactTypes += 1;\\n        _tools.increaseArtifactAmount();\\n        // New artifact gets URI formed from base URI and artifact's type\\n        _typesToUris[_artifactTypes] = string(\\n            abi.encodePacked(\\n                _baseURI,\\n                Strings.toString(_artifactTypes),\\n                \\\".json\\\"\\n            )\\n        );\\n        emit AddNewArtifact(_artifactTypes);\\n    }\\n\\n    function _setBaseUri(string calldata newBaseUri) private {\\n        _baseURI = newBaseUri;\\n        emit BaseUriChanged(newBaseUri);\\n    }\\n\\n    function _setUri(uint256 artifactType, string calldata newUri) private {\\n        require(\\n            artifactType <= _artifactTypes,\\n            \\\"Artifacts: This artifact doesn't exist\\\"\\n        );\\n        _typesToUris[artifactType] = newUri;\\n        emit UriChanged(artifactType, newUri);\\n    }\\n}\\n\",\"keccak256\":\"0x7789774b25a83b881ebe6b3037b3e69fa544fc5b9386fa8d0e6933dbe023b82d\",\"license\":\"MIT\"},\"contracts/interfaces/IArtifacts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\n\\ninterface IArtifacts is IERC1155Upgradeable {\\n    function lootArtifact(address user, uint256 artifactType) external;\\n}\\n\",\"keccak256\":\"0x474dfc1c338e54d1ec6ecdc958624ed27d11133911044444e3c4905462156506\",\"license\":\"MIT\"},\"contracts/interfaces/IBlackList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IBlackList {\\n    function check(address user) external returns (bool);\\n}\\n\",\"keccak256\":\"0xebed1d901a71cf9c636ce6b0ca4747ed409c16cfab81c0a9c8b1085e8f75a7ae\",\"license\":\"MIT\"},\"contracts/interfaces/ITools.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface ITools is IERC1155Upgradeable {\\n    struct Tool {\\n        uint32 strengthCost;\\n        uint32 maxStrength;\\n        uint32 miningDuration;\\n        uint32 energyCost;\\n        uint32 energyId;\\n    }\\n\\n    struct OwnedTool {\\n        uint128 toolType;\\n        uint128 strength;\\n    }\\n\\n    function getToolProperties(\\n        address user,\\n        uint256 toolId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 toolType,\\n            uint256 strength,\\n            uint256 strengthCost,\\n            uint256 miningDuration,\\n            uint256 energyCost\\n        );\\n\\n    function getResourceAddress(\\n        uint256 resourceId\\n    ) external view returns (address);\\n\\n    function getArtifactsAddress() external view returns (address);\\n\\n    function getMiningAddress() external view returns (address);\\n\\n    function increaseArtifactAmount() external;\\n\\n    function corrupt(\\n        address user,\\n        uint256 toolId,\\n        uint256 strengthCost\\n    ) external;\\n\\n    function getArtifactsTypesAmount() external view returns (uint256);\\n\\n    function getResourceAmount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa55053a7764de9c8957933aea768304a878627fda21fc168d2c11e62055a59e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612a36806100206000396000f3fe608060405234801561001057600080fd5b506004361061011c5760003560e01c8062fdd58e1461012157806301ffc9a7146101475780630cac36b21461016a5780630e89341c1461017f5780631f7fdffa146101925780632eb2c2d6146101a75780634e1273f4146101ba5780635c975abb146101da578063715018a6146101e5578063782f08ae146101ed5780637bb7c0d8146102005780638456cb59146102135780638da5cb5b1461021b57806394cf7cd014610230578063a0bcfc7f14610243578063a22cb46514610256578063ac2a301014610269578063c77b66c21461027c578063daa6c7551461028f578063e985e9c514610297578063ed9e8452146102d3578063f242432a146102db578063f2fde38b146102ee575b600080fd5b61013461012f366004611c1c565b610301565b6040519081526020015b60405180910390f35b61015a610155366004611c5e565b610399565b604051901515815260200161013e565b6101726103eb565b60405161013e9190611cda565b61017261018d366004611ced565b61047d565b6101a56101a0366004611e59565b61053f565b005b6101a56101b5366004611ef3565b610691565b6101cd6101c8366004611fa0565b6106d6565b60405161013e91906120a7565b60c95460ff1661015a565b6101a56107ff565b6101a56101fb366004612102565b610813565b6101a561020e36600461214d565b61082b565b6101a56109b0565b6102236109d2565b60405161013e91906121c4565b6101a561023e3660046121d8565b6109e1565b6101a56102513660046121f5565b610a5b565b6101a5610264366004612244565b610a71565b6101a5610277366004611c1c565b610a7c565b6101a561028a36600461227d565b610b8e565b60fe54610134565b61015a6102a53660046122d3565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205460ff1690565b6101a5610c5c565b6101a56102e9366004612301565b610c6c565b6101a56102fc3660046121d8565b610cb1565b60006001600160a01b0383166103715760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060009081526097602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806103ca57506001600160e01b031982166303a24d0760e21b145b806103e557506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060fd80546103fa90612369565b80601f016020809104026020016040519081016040528092919081815260200182805461042690612369565b80156104735780601f1061044857610100808354040283529160200191610473565b820191906000526020600020905b81548152906001019060200180831161045657829003601f168201915b5050505050905090565b606060fe548211156104a15760405162461bcd60e51b8152600401610368906123a4565b600082815260ff6020526040902080546104ba90612369565b80601f01602080910402602001604051908101604052809291908181526020018280546104e690612369565b80156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b50505050509050919050565b610547610d2a565b61054f610d89565b60fb54604051631846d2f560e31b815285916001600160a01b03169063c23697a89061057f9084906004016121c4565b6020604051808303816000875af115801561059e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c291906123ea565b156105df5760405162461bcd60e51b815260040161036890612407565b60005b845181101561067d5760fe548582815181106106005761060061243d565b6020026020010151111561066b5760405162461bcd60e51b815260206004820152602c60248201527f4172746966616374733a2074686973206172746966616374207479706520646f60448201526b65736e27742065786973747360a01b6064820152608401610368565b8061067581612469565b9150506105e2565b5061068a85858585610dcf565b5050505050565b6001600160a01b0385163314806106ad57506106ad85336102a5565b6106c95760405162461bcd60e51b815260040161036890612484565b61068a8585858585610f09565b6060815183511461073b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610368565b600083516001600160401b0381111561075657610756611d06565b60405190808252806020026020018201604052801561077f578160200160208202803683370190505b50905060005b84518110156107f7576107ca8582815181106107a3576107a361243d565b60200260200101518583815181106107bd576107bd61243d565b6020026020010151610301565b8282815181106107dc576107dc61243d565b60209081029190910101526107f081612469565b9050610785565b509392505050565b610807610d2a565b6108116000611096565b565b61081b610d2a565b6108268383836110e8565b505050565b600054610100900460ff161580801561084b5750600054600160ff909116105b8061086c575061085a30611164565b15801561086c575060005460ff166001145b6108cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610368565b6000805460ff1916600117905580156108f2576000805461ff0019166101001790555b60fc80546001600160a01b0319166001600160a01b03861617905582516109209060fd906020860190611afa565b5060fb80546001600160a01b0319166001600160a01b03841617905560408051602081019091526000815261095490611173565b61095c6111a3565b6109646111d2565b80156109aa576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6109b8610d2a565b60c95460ff166109ca57610811611201565b610811611255565b6033546001600160a01b031690565b6109e9610d2a565b6001600160a01b038116610a395760405162461bcd60e51b81526020600482015260176024820152764172746966616374733a207a65726f206164647265737360481b6044820152606401610368565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b610a63610d2a565b610a6d828261128e565b5050565b610a6d3383836112d8565b60fc60009054906101000a90046001600160a01b03166001600160a01b03166343cac2b16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af391906124d3565b6001600160a01b0316336001600160a01b031614610b725760405162461bcd60e51b815260206004820152603660248201527f4172746966616374733a206f6e6c79206d696e696e6720636f6e74726163742060448201527531b0b71031b0b636103a3434b990333ab731ba34b7b760511b6064820152608401610368565b610a6d82826001604051806020016040528060008152506113b9565b610b96610d2a565b610b9e610d89565b60fb54604051631846d2f560e31b815284916001600160a01b03169063c23697a890610bce9084906004016121c4565b6020604051808303816000875af1158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1191906123ea565b15610c2e5760405162461bcd60e51b815260040161036890612407565b60fe54851115610c505760405162461bcd60e51b8152600401610368906123a4565b61068a848685856113b9565b610c64610d2a565b610811611483565b6001600160a01b038516331480610c885750610c8885336102a5565b610ca45760405162461bcd60e51b815260040161036890612484565b61068a858585858561157e565b610cb9610d2a565b6001600160a01b038116610d1e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610368565b610d2781611096565b50565b33610d336109d2565b6001600160a01b0316146108115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610368565b60c95460ff16156108115760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610368565b6001600160a01b038416610df55760405162461bcd60e51b8152600401610368906124f0565b8151835114610e165760405162461bcd60e51b815260040161036890612531565b3360005b8451811015610eb357838181518110610e3557610e3561243d565b602002602001015160976000878481518110610e5357610e5361243d565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254610e9b9190612579565b90915550819050610eab81612469565b915050610e1a565b50846001600160a01b031660006001600160a01b0316826001600160a01b03166000805160206129c18339815191528787604051610ef2929190612591565b60405180910390a461068a8160008787878761169a565b8151835114610f2a5760405162461bcd60e51b815260040161036890612531565b6001600160a01b038416610f505760405162461bcd60e51b8152600401610368906125bf565b3360005b845181101561103a576000858281518110610f7157610f7161243d565b602002602001015190506000858381518110610f8f57610f8f61243d565b60209081029190910181015160008481526097835260408082206001600160a01b038e168352909352919091205490915081811015610fe05760405162461bcd60e51b815260040161036890612604565b60008381526097602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061101f908490612579565b925050819055505050508061103390612469565b9050610f54565b50846001600160a01b0316866001600160a01b0316826001600160a01b03166000805160206129c18339815191528787604051611078929190612591565b60405180910390a461108e81878787878761169a565b505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60fe5483111561110a5760405162461bcd60e51b8152600401610368906123a4565b600083815260ff60205260409020611123908383611b7e565b507f727278078475575154367bc16a7a4b8594316c9855643162a77c49ebdd8d2b0883838360405161115793929190612677565b60405180910390a1505050565b6001600160a01b03163b151590565b600054610100900460ff1661119a5760405162461bcd60e51b815260040161036890612691565b610d27816117fd565b600054610100900460ff166111ca5760405162461bcd60e51b815260040161036890612691565b61081161182d565b600054610100900460ff166111f95760405162461bcd60e51b815260040161036890612691565b61081161185d565b611209610d89565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861123e3390565b60405161124b91906121c4565b60405180910390a1565b61125d611890565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361123e565b61129a60fd8383611b7e565b507f87cdeaffd8e70903d6ce7cc983fac3b09ca79e83818124c98e47a1d70f8027d682826040516112cc9291906126dc565b60405180910390a15050565b816001600160a01b0316836001600160a01b0316141561134c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610368565b6001600160a01b03838116600081815260986020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166113df5760405162461bcd60e51b8152600401610368906124f0565b3360006113eb856118d9565b905060006113f8856118d9565b905060008681526097602090815260408083206001600160a01b038b1684529091528120805487929061142c908490612579565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716916000805160206129e1833981519152910160405180910390a461147a83600089898989611924565b50505050505050565b600160fe60008282546114969190612579565b909155505060fc5460408051630ebb956d60e01b815290516001600160a01b0390921691630ebb956d9160048082019260009290919082900301818387803b1580156114e157600080fd5b505af11580156114f5573d6000803e3d6000fd5b5050505060fd61150660fe546119e6565b60405160200161151792919061270c565b60408051601f1981840301815291815260fe54600090815260ff6020908152919020825161154a93919290910190611afa565b507f1b62dd3d3d4d94e83dc4eb3f8fe1fd04165796d790d0807467a1f58a7dd8a74a60fe5460405161124b91815260200190565b6001600160a01b0384166115a45760405162461bcd60e51b8152600401610368906125bf565b3360006115b0856118d9565b905060006115bd856118d9565b905060008681526097602090815260408083206001600160a01b038c168452909152902054858110156116025760405162461bcd60e51b815260040161036890612604565b60008781526097602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611641908490612579565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816916000805160206129e1833981519152910160405180910390a461168f848a8a8a8a8a611924565b505050505050505050565b6116ac846001600160a01b0316611164565b1561108e5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906116e590899089908890889088906004016127be565b6020604051808303816000875af1925050508015611720575060408051601f3d908101601f1916820190925261171d9181019061281c565b60015b6117cd5761172c612839565b806308c379a014156117665750611741612855565b8061174c5750611768565b8060405162461bcd60e51b81526004016103689190611cda565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610368565b6001600160e01b0319811663bc197c8160e01b1461147a5760405162461bcd60e51b8152600401610368906128de565b600054610100900460ff166118245760405162461bcd60e51b815260040161036890612691565b610d2781611aeb565b600054610100900460ff166118545760405162461bcd60e51b815260040161036890612691565b61081133611096565b600054610100900460ff166118845760405162461bcd60e51b815260040161036890612691565b60c9805460ff19169055565b60c95460ff166108115760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610368565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106119135761191361243d565b602090810291909101015292915050565b611936846001600160a01b0316611164565b1561108e5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061196f9089908990889088908890600401612926565b6020604051808303816000875af19250505080156119aa575060408051601f3d908101601f191682019092526119a79181019061281c565b60015b6119b65761172c612839565b6001600160e01b0319811663f23a6e6160e01b1461147a5760405162461bcd60e51b8152600401610368906128de565b606081611a0a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a345780611a1e81612469565b9150611a2d9050600a83612981565b9150611a0e565b6000816001600160401b03811115611a4e57611a4e611d06565b6040519080825280601f01601f191660200182016040528015611a78576020820181803683370190505b5090505b8415611ae357611a8d600183612995565b9150611a9a600a866129ac565b611aa5906030612579565b60f81b818381518110611aba57611aba61243d565b60200101906001600160f81b031916908160001a905350611adc600a86612981565b9450611a7c565b949350505050565b8051610a6d9060999060208401905b828054611b0690612369565b90600052602060002090601f016020900481019282611b285760008555611b6e565b82601f10611b4157805160ff1916838001178555611b6e565b82800160010185558215611b6e579182015b82811115611b6e578251825591602001919060010190611b53565b50611b7a929150611bf2565b5090565b828054611b8a90612369565b90600052602060002090601f016020900481019282611bac5760008555611b6e565b82601f10611bc55782800160ff19823516178555611b6e565b82800160010185558215611b6e579182015b82811115611b6e578235825591602001919060010190611bd7565b5b80821115611b7a5760008155600101611bf3565b6001600160a01b0381168114610d2757600080fd5b60008060408385031215611c2f57600080fd5b8235611c3a81611c07565b946020939093013593505050565b6001600160e01b031981168114610d2757600080fd5b600060208284031215611c7057600080fd5b8135611c7b81611c48565b9392505050565b60005b83811015611c9d578181015183820152602001611c85565b838111156109aa5750506000910152565b60008151808452611cc6816020860160208601611c82565b601f01601f19169290920160200192915050565b602081526000611c7b6020830184611cae565b600060208284031215611cff57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611d4157611d41611d06565b6040525050565b60006001600160401b03821115611d6157611d61611d06565b5060051b60200190565b600082601f830112611d7c57600080fd5b81356020611d8982611d48565b604051611d968282611d1c565b83815260059390931b8501820192828101915086841115611db657600080fd5b8286015b84811015611dd15780358352918301918301611dba565b509695505050505050565b60006001600160401b03831115611df557611df5611d06565b604051611e0c601f8501601f191660200182611d1c565b809150838152848484011115611e2157600080fd5b83836020830137600060208583010152509392505050565b600082601f830112611e4a57600080fd5b611c7b83833560208501611ddc565b60008060008060808587031215611e6f57600080fd5b8435611e7a81611c07565b935060208501356001600160401b0380821115611e9657600080fd5b611ea288838901611d6b565b94506040870135915080821115611eb857600080fd5b611ec488838901611d6b565b93506060870135915080821115611eda57600080fd5b50611ee787828801611e39565b91505092959194509250565b600080600080600060a08688031215611f0b57600080fd5b8535611f1681611c07565b94506020860135611f2681611c07565b935060408601356001600160401b0380821115611f4257600080fd5b611f4e89838a01611d6b565b94506060880135915080821115611f6457600080fd5b611f7089838a01611d6b565b93506080880135915080821115611f8657600080fd5b50611f9388828901611e39565b9150509295509295909350565b60008060408385031215611fb357600080fd5b82356001600160401b0380821115611fca57600080fd5b818501915085601f830112611fde57600080fd5b81356020611feb82611d48565b604051611ff88282611d1c565b83815260059390931b850182019282810191508984111561201857600080fd5b948201945b8386101561203f57853561203081611c07565b8252948201949082019061201d565b9650508601359250508082111561205557600080fd5b5061206285828601611d6b565b9150509250929050565b600081518084526020808501945080840160005b8381101561209c57815187529582019590820190600101612080565b509495945050505050565b602081526000611c7b602083018461206c565b60008083601f8401126120cc57600080fd5b5081356001600160401b038111156120e357600080fd5b6020830191508360208285010111156120fb57600080fd5b9250929050565b60008060006040848603121561211757600080fd5b8335925060208401356001600160401b0381111561213457600080fd5b612140868287016120ba565b9497909650939450505050565b60008060006060848603121561216257600080fd5b833561216d81611c07565b925060208401356001600160401b0381111561218857600080fd5b8401601f8101861361219957600080fd5b6121a886823560208401611ddc565b92505060408401356121b981611c07565b809150509250925092565b6001600160a01b0391909116815260200190565b6000602082840312156121ea57600080fd5b8135611c7b81611c07565b6000806020838503121561220857600080fd5b82356001600160401b0381111561221e57600080fd5b61222a858286016120ba565b90969095509350505050565b8015158114610d2757600080fd5b6000806040838503121561225757600080fd5b823561226281611c07565b9150602083013561227281612236565b809150509250929050565b6000806000806080858703121561229357600080fd5b8435935060208501356122a581611c07565b92506040850135915060608501356001600160401b038111156122c757600080fd5b611ee787828801611e39565b600080604083850312156122e657600080fd5b82356122f181611c07565b9150602083013561227281611c07565b600080600080600060a0868803121561231957600080fd5b853561232481611c07565b9450602086013561233481611c07565b9350604086013592506060860135915060808601356001600160401b0381111561235d57600080fd5b611f9388828901611e39565b600181811c9082168061237d57607f821691505b6020821081141561239e57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526026908201527f4172746966616374733a205468697320617274696661637420646f65736e277460408201526508195e1a5cdd60d21b606082015260800190565b6000602082840312156123fc57600080fd5b8151611c7b81612236565b6020808252601c908201527b105c9d1a599858dd1cce881d5cd95c881a5b88189b1858dadb1a5cdd60221b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561247d5761247d612453565b5060010190565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b6000602082840312156124e557600080fd5b8151611c7b81611c07565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b6000821982111561258c5761258c612453565b500190565b6040815260006125a4604083018561206c565b82810360208401526125b6818561206c565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8381526040602082015260006125b660408301848661264e565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b602081526000611ae360208301848661264e565b60008151612702818560208601611c82565b9290920192915050565b600080845481600182811c91508083168061272857607f831692505b602080841082141561274857634e487b7160e01b86526022600452602486fd5b81801561275c576001811461276d5761279a565b60ff1986168952848901965061279a565b60008b81526020902060005b868110156127925781548b820152908501908301612779565b505084890196505b5050505050506125b66127ad82866126f0565b64173539b7b760d91b815260050190565b6001600160a01b0386811682528516602082015260a0604082018190526000906127ea9083018661206c565b82810360608401526127fc818661206c565b905082810360808401526128108185611cae565b98975050505050505050565b60006020828403121561282e57600080fd5b8151611c7b81611c48565b600060033d11156128525760046000803e5060005160e01c5b90565b600060443d10156128635790565b6040516003193d81016004833e81513d6001600160401b03808311602484018310171561289257505050505090565b82850191508151818111156128aa5750505050505090565b843d87010160208285010111156128c45750505050505090565b6128d360208286010187611d1c565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061296090830184611cae565b979650505050505050565b634e487b7160e01b600052601260045260246000fd5b6000826129905761299061296b565b500490565b6000828210156129a7576129a7612453565b500390565b6000826129bb576129bb61296b565b50069056fe4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fbc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a2646970667358221220100d0082647d8f3c8ef5fd496be75fea6ede9756ff7b4d5d0aaa3649b519d96764736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011c5760003560e01c8062fdd58e1461012157806301ffc9a7146101475780630cac36b21461016a5780630e89341c1461017f5780631f7fdffa146101925780632eb2c2d6146101a75780634e1273f4146101ba5780635c975abb146101da578063715018a6146101e5578063782f08ae146101ed5780637bb7c0d8146102005780638456cb59146102135780638da5cb5b1461021b57806394cf7cd014610230578063a0bcfc7f14610243578063a22cb46514610256578063ac2a301014610269578063c77b66c21461027c578063daa6c7551461028f578063e985e9c514610297578063ed9e8452146102d3578063f242432a146102db578063f2fde38b146102ee575b600080fd5b61013461012f366004611c1c565b610301565b6040519081526020015b60405180910390f35b61015a610155366004611c5e565b610399565b604051901515815260200161013e565b6101726103eb565b60405161013e9190611cda565b61017261018d366004611ced565b61047d565b6101a56101a0366004611e59565b61053f565b005b6101a56101b5366004611ef3565b610691565b6101cd6101c8366004611fa0565b6106d6565b60405161013e91906120a7565b60c95460ff1661015a565b6101a56107ff565b6101a56101fb366004612102565b610813565b6101a561020e36600461214d565b61082b565b6101a56109b0565b6102236109d2565b60405161013e91906121c4565b6101a561023e3660046121d8565b6109e1565b6101a56102513660046121f5565b610a5b565b6101a5610264366004612244565b610a71565b6101a5610277366004611c1c565b610a7c565b6101a561028a36600461227d565b610b8e565b60fe54610134565b61015a6102a53660046122d3565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205460ff1690565b6101a5610c5c565b6101a56102e9366004612301565b610c6c565b6101a56102fc3660046121d8565b610cb1565b60006001600160a01b0383166103715760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060009081526097602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806103ca57506001600160e01b031982166303a24d0760e21b145b806103e557506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060fd80546103fa90612369565b80601f016020809104026020016040519081016040528092919081815260200182805461042690612369565b80156104735780601f1061044857610100808354040283529160200191610473565b820191906000526020600020905b81548152906001019060200180831161045657829003601f168201915b5050505050905090565b606060fe548211156104a15760405162461bcd60e51b8152600401610368906123a4565b600082815260ff6020526040902080546104ba90612369565b80601f01602080910402602001604051908101604052809291908181526020018280546104e690612369565b80156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b50505050509050919050565b610547610d2a565b61054f610d89565b60fb54604051631846d2f560e31b815285916001600160a01b03169063c23697a89061057f9084906004016121c4565b6020604051808303816000875af115801561059e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c291906123ea565b156105df5760405162461bcd60e51b815260040161036890612407565b60005b845181101561067d5760fe548582815181106106005761060061243d565b6020026020010151111561066b5760405162461bcd60e51b815260206004820152602c60248201527f4172746966616374733a2074686973206172746966616374207479706520646f60448201526b65736e27742065786973747360a01b6064820152608401610368565b8061067581612469565b9150506105e2565b5061068a85858585610dcf565b5050505050565b6001600160a01b0385163314806106ad57506106ad85336102a5565b6106c95760405162461bcd60e51b815260040161036890612484565b61068a8585858585610f09565b6060815183511461073b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610368565b600083516001600160401b0381111561075657610756611d06565b60405190808252806020026020018201604052801561077f578160200160208202803683370190505b50905060005b84518110156107f7576107ca8582815181106107a3576107a361243d565b60200260200101518583815181106107bd576107bd61243d565b6020026020010151610301565b8282815181106107dc576107dc61243d565b60209081029190910101526107f081612469565b9050610785565b509392505050565b610807610d2a565b6108116000611096565b565b61081b610d2a565b6108268383836110e8565b505050565b600054610100900460ff161580801561084b5750600054600160ff909116105b8061086c575061085a30611164565b15801561086c575060005460ff166001145b6108cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610368565b6000805460ff1916600117905580156108f2576000805461ff0019166101001790555b60fc80546001600160a01b0319166001600160a01b03861617905582516109209060fd906020860190611afa565b5060fb80546001600160a01b0319166001600160a01b03841617905560408051602081019091526000815261095490611173565b61095c6111a3565b6109646111d2565b80156109aa576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6109b8610d2a565b60c95460ff166109ca57610811611201565b610811611255565b6033546001600160a01b031690565b6109e9610d2a565b6001600160a01b038116610a395760405162461bcd60e51b81526020600482015260176024820152764172746966616374733a207a65726f206164647265737360481b6044820152606401610368565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b610a63610d2a565b610a6d828261128e565b5050565b610a6d3383836112d8565b60fc60009054906101000a90046001600160a01b03166001600160a01b03166343cac2b16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af391906124d3565b6001600160a01b0316336001600160a01b031614610b725760405162461bcd60e51b815260206004820152603660248201527f4172746966616374733a206f6e6c79206d696e696e6720636f6e74726163742060448201527531b0b71031b0b636103a3434b990333ab731ba34b7b760511b6064820152608401610368565b610a6d82826001604051806020016040528060008152506113b9565b610b96610d2a565b610b9e610d89565b60fb54604051631846d2f560e31b815284916001600160a01b03169063c23697a890610bce9084906004016121c4565b6020604051808303816000875af1158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1191906123ea565b15610c2e5760405162461bcd60e51b815260040161036890612407565b60fe54851115610c505760405162461bcd60e51b8152600401610368906123a4565b61068a848685856113b9565b610c64610d2a565b610811611483565b6001600160a01b038516331480610c885750610c8885336102a5565b610ca45760405162461bcd60e51b815260040161036890612484565b61068a858585858561157e565b610cb9610d2a565b6001600160a01b038116610d1e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610368565b610d2781611096565b50565b33610d336109d2565b6001600160a01b0316146108115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610368565b60c95460ff16156108115760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610368565b6001600160a01b038416610df55760405162461bcd60e51b8152600401610368906124f0565b8151835114610e165760405162461bcd60e51b815260040161036890612531565b3360005b8451811015610eb357838181518110610e3557610e3561243d565b602002602001015160976000878481518110610e5357610e5361243d565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254610e9b9190612579565b90915550819050610eab81612469565b915050610e1a565b50846001600160a01b031660006001600160a01b0316826001600160a01b03166000805160206129c18339815191528787604051610ef2929190612591565b60405180910390a461068a8160008787878761169a565b8151835114610f2a5760405162461bcd60e51b815260040161036890612531565b6001600160a01b038416610f505760405162461bcd60e51b8152600401610368906125bf565b3360005b845181101561103a576000858281518110610f7157610f7161243d565b602002602001015190506000858381518110610f8f57610f8f61243d565b60209081029190910181015160008481526097835260408082206001600160a01b038e168352909352919091205490915081811015610fe05760405162461bcd60e51b815260040161036890612604565b60008381526097602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061101f908490612579565b925050819055505050508061103390612469565b9050610f54565b50846001600160a01b0316866001600160a01b0316826001600160a01b03166000805160206129c18339815191528787604051611078929190612591565b60405180910390a461108e81878787878761169a565b505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60fe5483111561110a5760405162461bcd60e51b8152600401610368906123a4565b600083815260ff60205260409020611123908383611b7e565b507f727278078475575154367bc16a7a4b8594316c9855643162a77c49ebdd8d2b0883838360405161115793929190612677565b60405180910390a1505050565b6001600160a01b03163b151590565b600054610100900460ff1661119a5760405162461bcd60e51b815260040161036890612691565b610d27816117fd565b600054610100900460ff166111ca5760405162461bcd60e51b815260040161036890612691565b61081161182d565b600054610100900460ff166111f95760405162461bcd60e51b815260040161036890612691565b61081161185d565b611209610d89565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861123e3390565b60405161124b91906121c4565b60405180910390a1565b61125d611890565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361123e565b61129a60fd8383611b7e565b507f87cdeaffd8e70903d6ce7cc983fac3b09ca79e83818124c98e47a1d70f8027d682826040516112cc9291906126dc565b60405180910390a15050565b816001600160a01b0316836001600160a01b0316141561134c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610368565b6001600160a01b03838116600081815260986020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166113df5760405162461bcd60e51b8152600401610368906124f0565b3360006113eb856118d9565b905060006113f8856118d9565b905060008681526097602090815260408083206001600160a01b038b1684529091528120805487929061142c908490612579565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716916000805160206129e1833981519152910160405180910390a461147a83600089898989611924565b50505050505050565b600160fe60008282546114969190612579565b909155505060fc5460408051630ebb956d60e01b815290516001600160a01b0390921691630ebb956d9160048082019260009290919082900301818387803b1580156114e157600080fd5b505af11580156114f5573d6000803e3d6000fd5b5050505060fd61150660fe546119e6565b60405160200161151792919061270c565b60408051601f1981840301815291815260fe54600090815260ff6020908152919020825161154a93919290910190611afa565b507f1b62dd3d3d4d94e83dc4eb3f8fe1fd04165796d790d0807467a1f58a7dd8a74a60fe5460405161124b91815260200190565b6001600160a01b0384166115a45760405162461bcd60e51b8152600401610368906125bf565b3360006115b0856118d9565b905060006115bd856118d9565b905060008681526097602090815260408083206001600160a01b038c168452909152902054858110156116025760405162461bcd60e51b815260040161036890612604565b60008781526097602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611641908490612579565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816916000805160206129e1833981519152910160405180910390a461168f848a8a8a8a8a611924565b505050505050505050565b6116ac846001600160a01b0316611164565b1561108e5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906116e590899089908890889088906004016127be565b6020604051808303816000875af1925050508015611720575060408051601f3d908101601f1916820190925261171d9181019061281c565b60015b6117cd5761172c612839565b806308c379a014156117665750611741612855565b8061174c5750611768565b8060405162461bcd60e51b81526004016103689190611cda565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610368565b6001600160e01b0319811663bc197c8160e01b1461147a5760405162461bcd60e51b8152600401610368906128de565b600054610100900460ff166118245760405162461bcd60e51b815260040161036890612691565b610d2781611aeb565b600054610100900460ff166118545760405162461bcd60e51b815260040161036890612691565b61081133611096565b600054610100900460ff166118845760405162461bcd60e51b815260040161036890612691565b60c9805460ff19169055565b60c95460ff166108115760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610368565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106119135761191361243d565b602090810291909101015292915050565b611936846001600160a01b0316611164565b1561108e5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061196f9089908990889088908890600401612926565b6020604051808303816000875af19250505080156119aa575060408051601f3d908101601f191682019092526119a79181019061281c565b60015b6119b65761172c612839565b6001600160e01b0319811663f23a6e6160e01b1461147a5760405162461bcd60e51b8152600401610368906128de565b606081611a0a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611a345780611a1e81612469565b9150611a2d9050600a83612981565b9150611a0e565b6000816001600160401b03811115611a4e57611a4e611d06565b6040519080825280601f01601f191660200182016040528015611a78576020820181803683370190505b5090505b8415611ae357611a8d600183612995565b9150611a9a600a866129ac565b611aa5906030612579565b60f81b818381518110611aba57611aba61243d565b60200101906001600160f81b031916908160001a905350611adc600a86612981565b9450611a7c565b949350505050565b8051610a6d9060999060208401905b828054611b0690612369565b90600052602060002090601f016020900481019282611b285760008555611b6e565b82601f10611b4157805160ff1916838001178555611b6e565b82800160010185558215611b6e579182015b82811115611b6e578251825591602001919060010190611b53565b50611b7a929150611bf2565b5090565b828054611b8a90612369565b90600052602060002090601f016020900481019282611bac5760008555611b6e565b82601f10611bc55782800160ff19823516178555611b6e565b82800160010185558215611b6e579182015b82811115611b6e578235825591602001919060010190611bd7565b5b80821115611b7a5760008155600101611bf3565b6001600160a01b0381168114610d2757600080fd5b60008060408385031215611c2f57600080fd5b8235611c3a81611c07565b946020939093013593505050565b6001600160e01b031981168114610d2757600080fd5b600060208284031215611c7057600080fd5b8135611c7b81611c48565b9392505050565b60005b83811015611c9d578181015183820152602001611c85565b838111156109aa5750506000910152565b60008151808452611cc6816020860160208601611c82565b601f01601f19169290920160200192915050565b602081526000611c7b6020830184611cae565b600060208284031215611cff57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611d4157611d41611d06565b6040525050565b60006001600160401b03821115611d6157611d61611d06565b5060051b60200190565b600082601f830112611d7c57600080fd5b81356020611d8982611d48565b604051611d968282611d1c565b83815260059390931b8501820192828101915086841115611db657600080fd5b8286015b84811015611dd15780358352918301918301611dba565b509695505050505050565b60006001600160401b03831115611df557611df5611d06565b604051611e0c601f8501601f191660200182611d1c565b809150838152848484011115611e2157600080fd5b83836020830137600060208583010152509392505050565b600082601f830112611e4a57600080fd5b611c7b83833560208501611ddc565b60008060008060808587031215611e6f57600080fd5b8435611e7a81611c07565b935060208501356001600160401b0380821115611e9657600080fd5b611ea288838901611d6b565b94506040870135915080821115611eb857600080fd5b611ec488838901611d6b565b93506060870135915080821115611eda57600080fd5b50611ee787828801611e39565b91505092959194509250565b600080600080600060a08688031215611f0b57600080fd5b8535611f1681611c07565b94506020860135611f2681611c07565b935060408601356001600160401b0380821115611f4257600080fd5b611f4e89838a01611d6b565b94506060880135915080821115611f6457600080fd5b611f7089838a01611d6b565b93506080880135915080821115611f8657600080fd5b50611f9388828901611e39565b9150509295509295909350565b60008060408385031215611fb357600080fd5b82356001600160401b0380821115611fca57600080fd5b818501915085601f830112611fde57600080fd5b81356020611feb82611d48565b604051611ff88282611d1c565b83815260059390931b850182019282810191508984111561201857600080fd5b948201945b8386101561203f57853561203081611c07565b8252948201949082019061201d565b9650508601359250508082111561205557600080fd5b5061206285828601611d6b565b9150509250929050565b600081518084526020808501945080840160005b8381101561209c57815187529582019590820190600101612080565b509495945050505050565b602081526000611c7b602083018461206c565b60008083601f8401126120cc57600080fd5b5081356001600160401b038111156120e357600080fd5b6020830191508360208285010111156120fb57600080fd5b9250929050565b60008060006040848603121561211757600080fd5b8335925060208401356001600160401b0381111561213457600080fd5b612140868287016120ba565b9497909650939450505050565b60008060006060848603121561216257600080fd5b833561216d81611c07565b925060208401356001600160401b0381111561218857600080fd5b8401601f8101861361219957600080fd5b6121a886823560208401611ddc565b92505060408401356121b981611c07565b809150509250925092565b6001600160a01b0391909116815260200190565b6000602082840312156121ea57600080fd5b8135611c7b81611c07565b6000806020838503121561220857600080fd5b82356001600160401b0381111561221e57600080fd5b61222a858286016120ba565b90969095509350505050565b8015158114610d2757600080fd5b6000806040838503121561225757600080fd5b823561226281611c07565b9150602083013561227281612236565b809150509250929050565b6000806000806080858703121561229357600080fd5b8435935060208501356122a581611c07565b92506040850135915060608501356001600160401b038111156122c757600080fd5b611ee787828801611e39565b600080604083850312156122e657600080fd5b82356122f181611c07565b9150602083013561227281611c07565b600080600080600060a0868803121561231957600080fd5b853561232481611c07565b9450602086013561233481611c07565b9350604086013592506060860135915060808601356001600160401b0381111561235d57600080fd5b611f9388828901611e39565b600181811c9082168061237d57607f821691505b6020821081141561239e57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526026908201527f4172746966616374733a205468697320617274696661637420646f65736e277460408201526508195e1a5cdd60d21b606082015260800190565b6000602082840312156123fc57600080fd5b8151611c7b81612236565b6020808252601c908201527b105c9d1a599858dd1cce881d5cd95c881a5b88189b1858dadb1a5cdd60221b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561247d5761247d612453565b5060010190565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b6000602082840312156124e557600080fd5b8151611c7b81611c07565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b6000821982111561258c5761258c612453565b500190565b6040815260006125a4604083018561206c565b82810360208401526125b6818561206c565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8381526040602082015260006125b660408301848661264e565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b602081526000611ae360208301848661264e565b60008151612702818560208601611c82565b9290920192915050565b600080845481600182811c91508083168061272857607f831692505b602080841082141561274857634e487b7160e01b86526022600452602486fd5b81801561275c576001811461276d5761279a565b60ff1986168952848901965061279a565b60008b81526020902060005b868110156127925781548b820152908501908301612779565b505084890196505b5050505050506125b66127ad82866126f0565b64173539b7b760d91b815260050190565b6001600160a01b0386811682528516602082015260a0604082018190526000906127ea9083018661206c565b82810360608401526127fc818661206c565b905082810360808401526128108185611cae565b98975050505050505050565b60006020828403121561282e57600080fd5b8151611c7b81611c48565b600060033d11156128525760046000803e5060005160e01c5b90565b600060443d10156128635790565b6040516003193d81016004833e81513d6001600160401b03808311602484018310171561289257505050505090565b82850191508151818111156128aa5750505050505090565b843d87010160208285010111156128c45750505050505090565b6128d360208286010187611d1c565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061296090830184611cae565b979650505050505050565b634e487b7160e01b600052601260045260246000fd5b6000826129905761299061296b565b500490565b6000828210156129a7576129a7612453565b500390565b6000826129bb576129bb61296b565b50069056fe4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fbc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a2646970667358221220100d0082647d8f3c8ef5fd496be75fea6ede9756ff7b4d5d0aaa3649b519d96764736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2116,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2160,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 438,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_balances",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 444,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 446,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_uri",
        "offset": 0,
        "slot": "153",
        "type": "t_string_storage"
      },
      {
        "astId": 1653,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 303,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 408,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4028,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_blacklist",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IBlackList)6607"
      },
      {
        "astId": 4031,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_tools",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(ITools)6691"
      },
      {
        "astId": 4033,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_baseURI",
        "offset": 0,
        "slot": "253",
        "type": "t_string_storage"
      },
      {
        "astId": 4035,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_artifactTypes",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 4039,
        "contract": "contracts/Artifacts.sol:Artifacts",
        "label": "_typesToUris",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBlackList)6607": {
        "encoding": "inplace",
        "label": "contract IBlackList",
        "numberOfBytes": "20"
      },
      "t_contract(ITools)6691": {
        "encoding": "inplace",
        "label": "contract ITools",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}