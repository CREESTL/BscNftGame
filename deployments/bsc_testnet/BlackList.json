{
  "address": "0xC07A5E36EA51342F0d53DE957512B5adcB7F00e7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "addToBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "check",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "removeFromBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xab07e29af17eb532e3617d13004883f76def80f4202041ea74f9e8d760fa90ec",
  "receipt": {
    "to": null,
    "from": "0xa842a38CD758f8dE8537C5CBcB2006DB0250eC7C",
    "contractAddress": "0xC07A5E36EA51342F0d53DE957512B5adcB7F00e7",
    "transactionIndex": 0,
    "gasUsed": "294258",
    "logsBloom": "0x
    "blockHash": "0xe50b74a5b72acde2ddae92131e17da695cd0ec372d6ba314053f8ba2e2bb1b09",
    "transactionHash": "0xab07e29af17eb532e3617d13004883f76def80f4202041ea74f9e8d760fa90ec",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 31525589,
        "transactionHash": "0xab07e29af17eb532e3617d13004883f76def80f4202041ea74f9e8d760fa90ec",
        "address": "0xC07A5E36EA51342F0d53DE957512B5adcB7F00e7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a842a38cd758f8de8537c5cbcb2006db0250ec7c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe50b74a5b72acde2ddae92131e17da695cd0ec372d6ba314053f8ba2e2bb1b09"
      }
    ],
    "blockNumber": 31525589,
    "cumulativeGasUsed": "294258",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "63392786ebe349abfa2cdd2e3c441e37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlackList.sol\":\"BlackList\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BlackList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IBlackList.sol\\\";\\n\\ncontract BlackList is IBlackList, Ownable {\\n    mapping(address => bool) private list;\\n\\n    function check(address user) external view returns (bool) {\\n        return list[user];\\n    }\\n\\n    function addToBlacklist(address user) external onlyOwner {\\n        require(list[user] == false, \\\"User already in blacklist\\\");\\n        list[user] = true;\\n    }\\n\\n    function removeFromBlacklist(address user) external onlyOwner {\\n        require(list[user] == true, \\\"User is not in blacklist\\\");\\n        list[user] = false;\\n    }\\n}\\n\",\"keccak256\":\"0x94ac754f4eaebd596e9bffe701070be2c6e92f474d41733eb86fd7858ae2caec\",\"license\":\"MIT\"},\"contracts/interfaces/IBlackList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IBlackList {\\n    function check(address user) external returns (bool);\\n}\\n\",\"keccak256\":\"0xebed1d901a71cf9c636ce6b0ca4747ed409c16cfab81c0a9c8b1085e8f75a7ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103e78061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806344337ea114610067578063537df3b61461007c578063715018a61461008f5780638da5cb5b14610097578063c23697a8146100bc578063f2fde38b146100f8575b600080fd5b61007a610075366004610381565b61010b565b005b61007a61008a366004610381565b6101a4565b61007a610236565b61009f61024a565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e86100ca366004610381565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020016100b3565b61007a610106366004610381565b610259565b6101136102d2565b6001600160a01b03811660009081526001602052604090205460ff161561017d5760405162461bcd60e51b8152602060048201526019602482015278155cd95c88185b1c9958591e481a5b88189b1858dadb1a5cdd603a1b60448201526064015b60405180910390fd5b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6101ac6102d2565b6001600160a01b03811660009081526001602081905260409091205460ff161515146102155760405162461bcd60e51b8152602060048201526018602482015277155cd95c881a5cc81b9bdd081a5b88189b1858dadb1a5cdd60421b6044820152606401610174565b6001600160a01b03166000908152600160205260409020805460ff19169055565b61023e6102d2565b6102486000610331565b565b6000546001600160a01b031690565b6102616102d2565b6001600160a01b0381166102c65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610174565b6102cf81610331565b50565b336102db61024a565b6001600160a01b0316146102485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610174565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561039357600080fd5b81356001600160a01b03811681146103aa57600080fd5b939250505056fea26469706673582212206a0a3a5e3759e4c481d4db1f67f678817a858ffb1debbd0c4a6667558f6b21fd64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806344337ea114610067578063537df3b61461007c578063715018a61461008f5780638da5cb5b14610097578063c23697a8146100bc578063f2fde38b146100f8575b600080fd5b61007a610075366004610381565b61010b565b005b61007a61008a366004610381565b6101a4565b61007a610236565b61009f61024a565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e86100ca366004610381565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020016100b3565b61007a610106366004610381565b610259565b6101136102d2565b6001600160a01b03811660009081526001602052604090205460ff161561017d5760405162461bcd60e51b8152602060048201526019602482015278155cd95c88185b1c9958591e481a5b88189b1858dadb1a5cdd603a1b60448201526064015b60405180910390fd5b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b6101ac6102d2565b6001600160a01b03811660009081526001602081905260409091205460ff161515146102155760405162461bcd60e51b8152602060048201526018602482015277155cd95c881a5cc81b9bdd081a5b88189b1858dadb1a5cdd60421b6044820152606401610174565b6001600160a01b03166000908152600160205260409020805460ff19169055565b61023e6102d2565b6102486000610331565b565b6000546001600160a01b031690565b6102616102d2565b6001600160a01b0381166102c65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610174565b6102cf81610331565b50565b336102db61024a565b6001600160a01b0316146102485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610174565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561039357600080fd5b81356001600160a01b03811681146103aa57600080fd5b939250505056fea26469706673582212206a0a3a5e3759e4c481d4db1f67f678817a858ffb1debbd0c4a6667558f6b21fd64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2181,
        "contract": "contracts/BlackList.sol:BlackList",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4415,
        "contract": "contracts/BlackList.sol:BlackList",
        "label": "list",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
