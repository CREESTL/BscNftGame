{
  "address": "0x2B840498f382371A18ee573d4cB0b9A3Db9bdC6F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "compensationToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "devAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bnbSent",
          "type": "uint256"
        }
      ],
      "name": "GemFeeSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minTokensBeforeSwap",
          "type": "uint256"
        }
      ],
      "name": "MinTokensBeforeSwapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSwapped",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensIntoLiqudity",
          "type": "uint256"
        }
      ],
      "name": "SwapAndLiquify",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SwapAndLiquifyEnabledUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_gemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_gemWalletAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_liquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_maxTxAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_reflectionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compensationToken",
      "outputs": [
        {
          "internalType": "contract IGEM",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeFromFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeFromReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gemWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "includeInFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "includeInReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTokensSellToAddToLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reflectionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "deductTransferFee",
          "type": "bool"
        }
      ],
      "name": "reflectionFromToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gemFee_",
          "type": "uint256"
        }
      ],
      "name": "setGemFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "gemWalletAddress",
          "type": "address"
        }
      ],
      "name": "setGemWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidityFee_",
          "type": "uint256"
        }
      ],
      "name": "setLiquidityFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTxAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxTxAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToUpdate",
          "type": "uint256"
        }
      ],
      "name": "setNumTokensSellToAddToLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reflectionFee_",
          "type": "uint256"
        }
      ],
      "name": "setReflectionFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "setRouterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setSwapAndLiquifyEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAndLiquifyEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAmount",
          "type": "uint256"
        }
      ],
      "name": "tokenFromReflection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x759b0e72856e5c030d344b92bb3f9df3d030f14e6b72ccf35aef978d16cd3b67",
  "receipt": {
    "to": null,
    "from": "0xa842a38CD758f8dE8537C5CBcB2006DB0250eC7C",
    "contractAddress": "0x2B840498f382371A18ee573d4cB0b9A3Db9bdC6F",
    "transactionIndex": 5,
    "gasUsed": "4669023",
    "logsBloom": "0x
    "blockHash": "0x3f2b1bc319ccb38431370da2937d11abf2d45693bd33da2a69ea7335d4c3bf72",
    "transactionHash": "0x759b0e72856e5c030d344b92bb3f9df3d030f14e6b72ccf35aef978d16cd3b67",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 31525584,
        "transactionHash": "0x759b0e72856e5c030d344b92bb3f9df3d030f14e6b72ccf35aef978d16cd3b67",
        "address": "0x2B840498f382371A18ee573d4cB0b9A3Db9bdC6F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a842a38cd758f8de8537c5cbcb2006db0250ec7c"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x3f2b1bc319ccb38431370da2937d11abf2d45693bd33da2a69ea7335d4c3bf72"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 31525584,
        "transactionHash": "0x759b0e72856e5c030d344b92bb3f9df3d030f14e6b72ccf35aef978d16cd3b67",
        "address": "0x6725F303b657a9451d8BA641348b6761A6CC7a17",
        "topics": [
          "0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9",
          "0x0000000000000000000000002b840498f382371a18ee573d4cb0b9a3db9bdc6f",
          "0x000000000000000000000000ae13d989dac2f0debff460ac112a837c89baa7cd"
        ],
        "data": "0x000000000000000000000000f46d2d4430826bdf2edb62d50501d9eaaf79a5c3000000000000000000000000000000000000000000000000000000000003537f",
        "logIndex": 9,
        "blockHash": "0x3f2b1bc319ccb38431370da2937d11abf2d45693bd33da2a69ea7335d4c3bf72"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 31525584,
        "transactionHash": "0x759b0e72856e5c030d344b92bb3f9df3d030f14e6b72ccf35aef978d16cd3b67",
        "address": "0x2B840498f382371A18ee573d4cB0b9A3Db9bdC6F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000a842a38cd758f8de8537c5cbcb2006db0250ec7c",
          "0x000000000000000000000000a842a38cd758f8de8537c5cbcb2006db0250ec7c"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x3f2b1bc319ccb38431370da2937d11abf2d45693bd33da2a69ea7335d4c3bf72"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 31525584,
        "transactionHash": "0x759b0e72856e5c030d344b92bb3f9df3d030f14e6b72ccf35aef978d16cd3b67",
        "address": "0x2B840498f382371A18ee573d4cB0b9A3Db9bdC6F",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a842a38cd758f8de8537c5cbcb2006db0250ec7c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000429d069189e0000",
        "logIndex": 11,
        "blockHash": "0x3f2b1bc319ccb38431370da2937d11abf2d45693bd33da2a69ea7335d4c3bf72"
      }
    ],
    "blockNumber": 31525584,
    "cumulativeGasUsed": "5310155",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD99D1c33F9fC3444f8101754aBC46c52416550D1",
    "0x9336b1ad55671eC57312ba1c3A90E088007F47F7",
    "0xa842a38CD758f8dE8537C5CBcB2006DB0250eC7C",
    "0xa842a38CD758f8dE8537C5CBcB2006DB0250eC7C"
  ],
  "numDeployments": 1,
  "solcInputHash": "39904331f40987f96440f23036f4fd60",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compensationToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSent\",\"type\":\"uint256\"}],\"name\":\"GemFeeSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_gemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_gemWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compensationToken\",\"outputs\":[{\"internalType\":\"contract IGEM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gemFee_\",\"type\":\"uint256\"}],\"name\":\"setGemFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"gemWalletAddress\",\"type\":\"address\"}],\"name\":\"setGemWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee_\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToUpdate\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionFee_\",\"type\":\"uint256\"}],\"name\":\"setReflectionFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/others/Resources.sol\":\"PocMon\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/UniswapInterfaces.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(\\n        address to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x088a34c621343cd65ddfbe56c3d8d36974d1a37933dba4ed181e1824c78aca16\",\"license\":\"Unlicense\"},\"contracts/others/Resources.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/UniswapInterfaces.sol\\\";\\n\\ncontract PocMon is Ownable, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private _isExcluded;\\n    address[] private _excluded;\\n    address public _gemWalletAddress;\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private _tTotal;\\n    uint256 private _rTotal;\\n    uint256 private _tFeeTotal;\\n    string private _name;\\n    string private _symbol;\\n    uint256 private _decimals;\\n    uint256 public _reflectionFee = 1;\\n    uint256 private _previousReflectionFee;\\n    uint256 public _gemFee = 6;\\n    uint256 private _previousGemFee;\\n    uint256 public _liquidityFee = 3;\\n    uint256 private _previousLiquidityFee;\\n    IUniswapV2Router02 public uniswapV2Router;\\n    address public uniswapV2Pair;\\n    bool inSwapAndLiquify;\\n    bool public swapAndLiquifyEnabled = true;\\n    uint256 public _maxTxAmount;\\n    uint256 public numTokensSellToAddToLiquidity;\\n\\n    IGEM public compensationToken;\\n\\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n    event GemFeeSent(address to, uint256 bnbSent);\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    constructor(\\n        address router,\\n        address compensationToken_,\\n        address devAddress,\\n        address owner_\\n    ) Ownable() {\\n        _name = \\\"PocMon\\\";\\n        _symbol = \\\"MON\\\";\\n        _decimals = 9;\\n        _tTotal = 300_000_000 * 10 ** 9;\\n        _rTotal = (MAX - (MAX % _tTotal));\\n        _maxTxAmount = 10 * 10 ** 6 * 10 ** 9;\\n        numTokensSellToAddToLiquidity = 1_500_000 * 10 ** 9;\\n        _gemWalletAddress = devAddress;\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\\n        // Create a uniswap pair for this new token\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        // set the rest of the contract variables\\n        uniswapV2Router = _uniswapV2Router;\\n\\n        compensationToken = IGEM(compensationToken_);\\n\\n        //exclude owner and this contract from fee\\n        _isExcludedFromFee[owner_] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_gemWalletAddress] = true;\\n\\n        transferOwnership(owner_);\\n        _rOwned[owner()] = _rTotal;\\n\\n        emit Transfer(address(0), owner(), _tTotal);\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint256) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function isExcludedFromReward(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function reflectionFromToken(\\n        uint256 tAmount,\\n        bool deductTransferFee\\n    ) public view returns (uint256) {\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount, , , , , ) = _getValues(tAmount);\\n            return rAmount;\\n        } else {\\n            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(\\n        uint256 rAmount\\n    ) public view returns (uint256) {\\n        require(\\n            rAmount <= _rTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function excludeFromReward(address account) public onlyOwner {\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        if (_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeInReward(address account) external onlyOwner {\\n        require(_isExcluded[account], \\\"Account is already included\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function excludeFromFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = true;\\n    }\\n\\n    function includeInFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n    // !\\n    function setReflectionFeePercent(\\n        uint256 reflectionFee_\\n    ) external onlyOwner {\\n        require(\\n            reflectionFee_ + _liquidityFee + _gemFee < 15,\\n            \\\"You have reached fee limit\\\"\\n        );\\n        _reflectionFee = reflectionFee_;\\n    }\\n\\n    // !\\n    function setGemFeePercent(uint256 gemFee_) external onlyOwner {\\n        require(\\n            _reflectionFee + _liquidityFee + gemFee_ < 15,\\n            \\\"You have reached fee limit\\\"\\n        );\\n        _gemFee = gemFee_;\\n    }\\n\\n    // !\\n    function setLiquidityFeePercent(uint256 liquidityFee_) external onlyOwner {\\n        require(\\n            _reflectionFee + liquidityFee_ + _gemFee < 15,\\n            \\\"You have reached fee limit\\\"\\n        );\\n        _liquidityFee = liquidityFee_;\\n    }\\n\\n    // !\\n    function setMaxTxAmount(uint256 maxTxAmount) public onlyOwner {\\n        require(\\n            maxTxAmount >= 1_500_000 * 10 ** 9,\\n            \\\"maxTxAmount should be greater than 1500000e9\\\"\\n        );\\n        _maxTxAmount = maxTxAmount;\\n    }\\n\\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\n        swapAndLiquifyEnabled = _enabled;\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\n    }\\n\\n    function reflectionFee() external view returns (uint256) {\\n        return _reflectionFee;\\n    }\\n\\n    function gemFee() external view returns (uint256) {\\n        return _gemFee;\\n    }\\n\\n    function liquidityFee() external view returns (uint256) {\\n        return _liquidityFee;\\n    }\\n\\n    //to recieve ETH from uniswapV2Router when swaping\\n    receive() external payable {}\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n\\n    function _getValues(\\n        uint256 tAmount\\n    )\\n        private\\n        view\\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\\n    {\\n        (\\n            uint256 tTransferAmount,\\n            uint256 tReflectionFee,\\n            uint256 tGemFee,\\n            uint256 tLiquidity\\n        ) = _getTValues(tAmount);\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rReflectionFee\\n        ) = _getRValues(\\n                tAmount,\\n                tReflectionFee,\\n                tGemFee,\\n                tLiquidity,\\n                _getRate()\\n            );\\n        return (\\n            rAmount,\\n            rTransferAmount,\\n            rReflectionFee,\\n            tTransferAmount,\\n            tReflectionFee,\\n            tLiquidity + tGemFee\\n        );\\n    }\\n\\n    function _getTValues(\\n        uint256 tAmount\\n    ) private view returns (uint256, uint256, uint256, uint256) {\\n        uint256 tReflectionFee = calculateReflectionFee(tAmount);\\n        uint256 tGemFee = calculateGemFee(tAmount);\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\\n        uint256 tTransferAmount = tAmount.sub(tReflectionFee).sub(tGemFee).sub(\\n            tLiquidity\\n        );\\n        return (tTransferAmount, tReflectionFee, tGemFee, tLiquidity);\\n    }\\n\\n    function _getRValues(\\n        uint256 tAmount,\\n        uint256 tReflectionFee,\\n        uint256 tGemFee,\\n        uint256 tLiquidity,\\n        uint256 currentRate\\n    ) private pure returns (uint256, uint256, uint256) {\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rReflectionFee = tReflectionFee.mul(currentRate);\\n        uint256 rGemFee = tGemFee.mul(currentRate);\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rReflectionFee).sub(rGemFee).sub(\\n            rLiquidity\\n        );\\n        return (rAmount, rTransferAmount, rReflectionFee);\\n    }\\n\\n    function _getRate() private view returns (uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (\\n                _rOwned[_excluded[i]] > rSupply ||\\n                _tOwned[_excluded[i]] > tSupply\\n            ) return (_rTotal, _tTotal);\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\n        }\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _takeLiquidity(uint256 tLiquidity) private {\\n        uint256 currentRate = _getRate();\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\n        if (_isExcluded[address(this)])\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\\n    }\\n\\n    function calculateReflectionFee(\\n        uint256 _amount\\n    ) private view returns (uint256) {\\n        return _amount.mul(_reflectionFee).div(10 ** 2);\\n    }\\n\\n    function calculateGemFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_gemFee).div(10 ** 2);\\n    }\\n\\n    function calculateLiquidityFee(\\n        uint256 _amount\\n    ) private view returns (uint256) {\\n        return _amount.mul(_liquidityFee).div(10 ** 2);\\n    }\\n\\n    function removeAllFee() private {\\n        _previousReflectionFee = _reflectionFee;\\n        _previousGemFee = _gemFee;\\n        _previousLiquidityFee = _liquidityFee;\\n\\n        _reflectionFee = 0;\\n        _gemFee = 0;\\n        _liquidityFee = 0;\\n    }\\n\\n    function restoreAllFee() private {\\n        _reflectionFee = _previousReflectionFee;\\n        _gemFee = _previousGemFee;\\n        _liquidityFee = _previousLiquidityFee;\\n    }\\n\\n    function setRouterAddress(address newRouter) external onlyOwner {\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouter);\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n        uniswapV2Router = _uniswapV2Router;\\n    }\\n\\n    function setNumTokensSellToAddToLiquidity(\\n        uint256 amountToUpdate\\n    ) external onlyOwner {\\n        numTokensSellToAddToLiquidity = amountToUpdate;\\n    }\\n\\n    function setGemWallet(address payable gemWalletAddress) external onlyOwner {\\n        _gemWalletAddress = gemWalletAddress;\\n    }\\n\\n    function gemWallet() external view returns (address) {\\n        return _gemWalletAddress;\\n    }\\n\\n    function isExcludedFromFee(address account) public view returns (bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        if (from != owner() && to != owner()) {\\n            require(\\n                amount <= _maxTxAmount,\\n                \\\"Transfer amount exceeds the maxTxAmount.\\\"\\n            );\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        if (contractTokenBalance >= _maxTxAmount) {\\n            contractTokenBalance = _maxTxAmount;\\n        }\\n\\n        bool overMinTokenBalance = contractTokenBalance >=\\n            numTokensSellToAddToLiquidity;\\n        if (\\n            overMinTokenBalance &&\\n            !inSwapAndLiquify &&\\n            from != uniswapV2Pair &&\\n            swapAndLiquifyEnabled\\n        ) {\\n            contractTokenBalance = numTokensSellToAddToLiquidity;\\n            swapAndLiquify(contractTokenBalance);\\n        }\\n\\n        bool takeFee = true;\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\n            takeFee = false;\\n        }\\n\\n        _tokenTransfer(from, to, amount, takeFee);\\n    }\\n\\n    function swapTokensForBnb(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // make the swap\\n        try\\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                tokenAmount,\\n                0, // accept any amount of BNB\\n                path,\\n                address(this),\\n                block.timestamp\\n            )\\n        {} catch {}\\n    }\\n\\n    // !\\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\n        uint256 toGemWallet = contractTokenBalance.mul(_gemFee).div(\\n            _gemFee.add(_liquidityFee)\\n        );\\n        uint256 toLiquidity = contractTokenBalance.sub(toGemWallet);\\n\\n        uint256 half = toLiquidity.div(2);\\n        uint256 otherHalf = toLiquidity.sub(half);\\n\\n        uint256 swapToBNB = half.add(toGemWallet);\\n        uint256 initialBalance = address(this).balance;\\n        swapTokensForBnb(swapToBNB);\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n        uint256 gemFeeAmount = newBalance.mul(toGemWallet).div(\\n            toGemWallet + half\\n        );\\n        uint256 bnbForLiquidity = newBalance.sub(gemFeeAmount);\\n        if (gemFeeAmount > 0) {\\n            payable(_gemWalletAddress).transfer(gemFeeAmount);\\n            emit GemFeeSent(_gemWalletAddress, gemFeeAmount);\\n        }\\n        addLiquidity(otherHalf, bnbForLiquidity);\\n        emit SwapAndLiquify(half, bnbForLiquidity, otherHalf);\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        try\\n            uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n                address(this),\\n                tokenAmount,\\n                0, // slippage is unavoidable\\n                0, // slippage is unavoidable\\n                address(this), // LP tokens are locked\\n                block.timestamp\\n            )\\n        {} catch {}\\n    }\\n\\n    function _tokenTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool takeFee\\n    ) private {\\n        if (!takeFee) removeAllFee();\\n\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferFromExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferToExcluded(sender, recipient, amount);\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferBothExcluded(sender, recipient, amount);\\n        } else {\\n            _transferStandard(sender, recipient, amount);\\n        }\\n\\n        if (!takeFee) restoreAllFee();\\n    }\\n\\n    function _getBnbEquivalent(uint256 amount) internal view returns (uint256) {\\n        if (!uniswapV2Pair.isContract()) {\\n            return 0;\\n        }\\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        try pair.getReserves() returns (\\n            uint112 reserve0_,\\n            uint112 reserve1_,\\n            uint32\\n        ) {\\n            reserve0 = reserve0_;\\n            reserve1 = reserve1_;\\n        } catch {\\n            return 0;\\n        }\\n\\n        if (reserve0 == 0) {\\n            return 0;\\n        }\\n        return (amount * reserve1) / reserve0;\\n    }\\n\\n    function _compensateFee(\\n        address sender,\\n        address recipient,\\n        uint256 totalFee\\n    ) private {\\n        if (totalFee > 0 && sender == uniswapV2Pair) {\\n            uint256 bnbEquivalent = _getBnbEquivalent(totalFee);\\n            compensationToken.compensateBnb(recipient, bnbEquivalent);\\n        }\\n    }\\n\\n    function _transferStandard(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        _compensateFee(sender, recipient, tFee + tLiquidity);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferToExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        _compensateFee(sender, recipient, tFee + tLiquidity);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferFromExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        _compensateFee(sender, recipient, tFee + tLiquidity);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferBothExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        _compensateFee(sender, recipient, tFee + tLiquidity);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n}\\n\\ninterface IGEM {\\n    function compensateBnb(address to, uint256 bnbAmount) external;\\n}\\n\",\"keccak256\":\"0x4259d5bbf46ffd7c312011774a5bc4d953a52fd520c90753708d73c5705d2230\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600e55600660105560036012556015805460ff60a81b1916600160a81b1790553480156200003357600080fd5b5060405162002ec538038062002ec583398101604081905262000056916200058f565b62000061336200039b565b604080518082019091526006808252652837b1a6b7b760d11b60209092019182526200009091600b91620004cc565b506040805180820190915260038082526226a7a760e91b6020909201918252620000bd91600c91620004cc565b506009600d55670429d069189e00006008819055620000df90600019620005ec565b620000ed906000196200060f565b600955662386f26fc100006016556605543df729c000601755600780546001600160a01b0319166001600160a01b03848116919091179091556040805163c45a015560e01b81529051869283169163c45a01559160048083019260209291908290030181865afa15801562000166573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018c919062000635565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001da573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000200919062000635565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af11580156200024e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000274919062000635565b601580546001600160a01b03199081166001600160a01b039384161790915560148054821684841617905560188054909116868316179055828116600090815260046020526040808220805460ff1990811660019081179092553084528284208054821683179055600754909416835291208054909216179055620002f982620003eb565b60095460016000620003136000546001600160a01b031690565b6001600160a01b03168152602081019190915260400160002055620003406000546001600160a01b031690565b6001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008546040516200038891815260200190565b60405180910390a3505050505062000697565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620003f56200046e565b6001600160a01b038116620004605760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200046b816200039b565b50565b6000546001600160a01b03163314620004ca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000457565b565b828054620004da906200065a565b90600052602060002090601f016020900481019282620004fe576000855562000549565b82601f106200051957805160ff191683800117855562000549565b8280016001018555821562000549579182015b82811115620005495782518255916020019190600101906200052c565b50620005579291506200055b565b5090565b5b808211156200055757600081556001016200055c565b80516001600160a01b03811681146200058a57600080fd5b919050565b60008060008060808587031215620005a657600080fd5b620005b18562000572565b9350620005c16020860162000572565b9250620005d16040860162000572565b9150620005e16060860162000572565b905092959194509250565b6000826200060a57634e487b7160e01b600052601260045260246000fd5b500690565b6000828210156200063057634e487b7160e01b600052601160045260246000fd5b500390565b6000602082840312156200064857600080fd5b620006538262000572565b9392505050565b600181811c908216806200066f57607f821691505b602082108114156200069157634e487b7160e01b600052602260045260246000fd5b50919050565b61281e80620006a76000396000f3fe6080604052600436106101fb5760003560e01c806306fdde0314610207578063095ea7b31461023257806314af7962146102625780631694505e1461028457806318160ddd146102bc5780631abe0e95146102db5780631f7ede2b146102f957806323b872dd146103195780632d83811914610339578063313ce567146103595780633206b4aa1461036e5780633685d4191461038457806339509351146103a457806341cb87fc146103c4578063437823ec146103e45780634549b0391461040457806349bd5a5e146104245780634a74bb021461044457806352390c02146104655780635342acb4146104855780636bc87c3a146104be57806370a08231146104d4578063715018a6146104f45780637bf0be8d146105095780637d1db4a51461052957806383ad79941461053f57806388f82020146105545780638da5cb5b1461058d5780638ee88c53146105a257806393145582146105c257806395d89b41146105d757806398118cb4146105ec578063a0dc392d14610601578063a457c2d714610621578063a9059cbb14610641578063c49b9a8014610661578063c81d583914610681578063d12a7688146106a1578063dd62ed3e146106b7578063ea2f0b37146106fd578063ec28438a1461071d578063f0f165af1461073d578063f2fde38b1461075d578063fdcc33821461077d57600080fd5b3661020257005b600080fd5b34801561021357600080fd5b5061021c610793565b6040516102299190612381565b60405180910390f35b34801561023e57600080fd5b5061025261024d3660046123eb565b610825565b6040519015158152602001610229565b34801561026e57600080fd5b5061028261027d366004612417565b61083c565b005b34801561029057600080fd5b506014546102a4906001600160a01b031681565b6040516001600160a01b039091168152602001610229565b3480156102c857600080fd5b506008545b604051908152602001610229565b3480156102e757600080fd5b506007546001600160a01b03166102a4565b34801561030557600080fd5b50610282610314366004612417565b61088c565b34801561032557600080fd5b50610252610334366004612430565b6108d3565b34801561034557600080fd5b506102cd610354366004612417565b61093c565b34801561036557600080fd5b50600d546102cd565b34801561037a57600080fd5b506102cd600e5481565b34801561039057600080fd5b5061028261039f366004612471565b6109c0565b3480156103b057600080fd5b506102526103bf3660046123eb565b610b53565b3480156103d057600080fd5b506102826103df366004612471565b610b89565b3480156103f057600080fd5b506102826103ff366004612471565b610d0c565b34801561041057600080fd5b506102cd61041f3660046124a3565b610d38565b34801561043057600080fd5b506015546102a4906001600160a01b031681565b34801561045057600080fd5b5060155461025290600160a81b900460ff1681565b34801561047157600080fd5b50610282610480366004612471565b610dc5565b34801561049157600080fd5b506102526104a0366004612471565b6001600160a01b031660009081526004602052604090205460ff1690565b3480156104ca57600080fd5b506102cd60125481565b3480156104e057600080fd5b506102cd6104ef366004612471565b610ef4565b34801561050057600080fd5b50610282610f53565b34801561051557600080fd5b506007546102a4906001600160a01b031681565b34801561053557600080fd5b506102cd60165481565b34801561054b57600080fd5b50600e546102cd565b34801561056057600080fd5b5061025261056f366004612471565b6001600160a01b031660009081526005602052604090205460ff1690565b34801561059957600080fd5b506102a4610f67565b3480156105ae57600080fd5b506102826105bd366004612417565b610f76565b3480156105ce57600080fd5b506010546102cd565b3480156105e357600080fd5b5061021c610fbd565b3480156105f857600080fd5b506012546102cd565b34801561060d57600080fd5b5061028261061c366004612471565b610fcc565b34801561062d57600080fd5b5061025261063c3660046123eb565b610ff6565b34801561064d57600080fd5b5061025261065c3660046123eb565b611045565b34801561066d57600080fd5b5061028261067c3660046124cf565b611052565b34801561068d57600080fd5b506018546102a4906001600160a01b031681565b3480156106ad57600080fd5b506102cd60175481565b3480156106c357600080fd5b506102cd6106d23660046124ea565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b34801561070957600080fd5b50610282610718366004612471565b6110b2565b34801561072957600080fd5b50610282610738366004612417565b6110db565b34801561074957600080fd5b50610282610758366004612417565b611154565b34801561076957600080fd5b50610282610778366004612471565b611161565b34801561078957600080fd5b506102cd60105481565b6060600b80546107a290612523565b80601f01602080910402602001604051908101604052809291908181526020018280546107ce90612523565b801561081b5780601f106107f05761010080835404028352916020019161081b565b820191906000526020600020905b8154815290600101906020018083116107fe57829003601f168201915b5050505050905090565b60006108323384846111da565b5060015b92915050565b6108446112fe565b600f81601254600e546108579190612574565b6108619190612574565b106108875760405162461bcd60e51b815260040161087e9061258c565b60405180910390fd5b601055565b6108946112fe565b600f601054601254836108a79190612574565b6108b19190612574565b106108ce5760405162461bcd60e51b815260040161087e9061258c565b600e55565b60006108e084848461135d565b610932843361092d8560405180606001604052806028815260200161279c602891396001600160a01b038a1660009081526003602090815260408083203384529091529020549190611609565b6111da565b5060019392505050565b60006009548211156109a35760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201526965666c656374696f6e7360b01b606482015260840161087e565b60006109ad611635565b90506109b98382611658565b9392505050565b6109c86112fe565b6001600160a01b03811660009081526005602052604090205460ff16610a2e5760405162461bcd60e51b815260206004820152601b60248201527a1058d8dbdd5b9d081a5cc8185b1c9958591e481a5b98db1d591959602a1b604482015260640161087e565b60005b600654811015610b4f57816001600160a01b031660068281548110610a5857610a586125c0565b6000918252602090912001546001600160a01b03161415610b3d5760068054610a83906001906125d6565b81548110610a9357610a936125c0565b600091825260209091200154600680546001600160a01b039092169183908110610abf57610abf6125c0565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559184168152600282526040808220829055600590925220805460ff191690556006805480610b1757610b176125ed565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b80610b4781612603565b915050610a31565b5050565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909161083291859061092d9086611664565b610b916112fe565b6000819050806001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf8919061261e565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c69919061261e565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda919061261e565b601580546001600160a01b039283166001600160a01b0319918216179091556014805493909216921691909117905550565b610d146112fe565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6000600854831115610d8c5760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e74206d757374206265206c657373207468616e20737570706c7900604482015260640161087e565b81610dab576000610d9c84611670565b50939550610836945050505050565b6000610db684611670565b50929550610836945050505050565b610dcd6112fe565b6001600160a01b03811660009081526005602052604090205460ff1615610e345760405162461bcd60e51b815260206004820152601b60248201527a1058d8dbdd5b9d081a5cc8185b1c9958591e48195e18db1d591959602a1b604482015260640161087e565b6001600160a01b03811660009081526001602052604090205415610e8e576001600160a01b038116600090815260016020526040902054610e749061093c565b6001600160a01b0382166000908152600260205260409020555b6001600160a01b03166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055565b6001600160a01b03811660009081526005602052604081205460ff1615610f3157506001600160a01b031660009081526002602052604090205490565b6001600160a01b0382166000908152600160205260409020546108369061093c565b610f5b6112fe565b610f6560006116db565b565b6000546001600160a01b031690565b610f7e6112fe565b600f60105482600e54610f919190612574565b610f9b9190612574565b10610fb85760405162461bcd60e51b815260040161087e9061258c565b601255565b6060600c80546107a290612523565b610fd46112fe565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000610832338461092d856040518060600160405280602581526020016127c4602591393360009081526003602090815260408083206001600160a01b038d1684529091529020549190611609565b600061083233848461135d565b61105a6112fe565b60158054821515600160a81b0260ff60a81b199091161790556040517f53726dfcaf90650aa7eb35524f4d3220f07413c8d6cb404cc8c18bf5591bc159906110a790831515815260200190565b60405180910390a150565b6110ba6112fe565b6001600160a01b03166000908152600460205260409020805460ff19169055565b6110e36112fe565b6605543df729c00081101561114f5760405162461bcd60e51b815260206004820152602c60248201527f6d61785478416d6f756e742073686f756c64206265206772656174657220746860448201526b616e2031353030303030653960a01b606482015260840161087e565b601655565b61115c6112fe565b601755565b6111696112fe565b6001600160a01b0381166111ce5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161087e565b6111d7816116db565b50565b6001600160a01b03831661123c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161087e565b6001600160a01b03821661129d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161087e565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b33611307610f67565b6001600160a01b031614610f655760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161087e565b6001600160a01b0383166113c15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161087e565b6001600160a01b0382166114235760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161087e565b600081116114855760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161087e565b61148d610f67565b6001600160a01b0316836001600160a01b0316141580156114c757506114b1610f67565b6001600160a01b0316826001600160a01b031614155b1561152f5760165481111561152f5760405162461bcd60e51b815260206004820152602860248201527f5472616e7366657220616d6f756e74206578636565647320746865206d6178546044820152673c20b6b7bab73a1760c11b606482015260840161087e565b600061153a30610ef4565b9050601654811061154a57506016545b601754811080159081906115685750601554600160a01b900460ff16155b801561158257506015546001600160a01b03868116911614155b80156115975750601554600160a81b900460ff165b156115aa5760175491506115aa8261172b565b6001600160a01b03851660009081526004602052604090205460019060ff16806115ec57506001600160a01b03851660009081526004602052604090205460ff165b156115f5575060005b611601868686846118d1565b505050505050565b6000818484111561162d5760405162461bcd60e51b815260040161087e9190612381565b505050900390565b6000806000611642611a1f565b90925090506116518282611658565b9250505090565b60006109b9828461263b565b60006109b98284612574565b6000806000806000806000806000806116888b611ba1565b935093509350935060008060006116a98e8787876116a4611635565b611bf6565b9194509250905082828289896116bf8a8a612574565b9c509c509c509c509c509c505050505050505091939550919395565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6015805460ff60a01b1916600160a01b1790556012546010546000916117689161175491611664565b601054611762908590611c58565b90611658565b905060006117768383611c64565b90506000611785826002611658565b905060006117938383611c64565b905060006117a18386611664565b9050476117ad82611c70565b60006117b94783611c64565b905060006117d46117ca878a612574565b611762848b611c58565b905060006117e28383611c64565b9050811561186d576007546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050158015611824573d6000803e3d6000fd5b506007546040517ffd581ed4b14aa526b334ee3509a6979a356edff4ca4233a58e8b2a12a2e5a49391611864916001600160a01b0390911690859061265d565b60405180910390a15b6118778682611dc7565b60408051888152602081018390529081018790527f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619060600160405180910390a150506015805460ff60a01b191690555050505050505050565b806118fb576118fb600e8054600f5560108054601155601280546013556000928390559082905555565b6001600160a01b03841660009081526005602052604090205460ff16801561193c57506001600160a01b03831660009081526005602052604090205460ff16155b156119515761194c848484611e78565b6119fd565b6001600160a01b03841660009081526005602052604090205460ff1615801561199257506001600160a01b03831660009081526005602052604090205460ff165b156119a25761194c848484611fb2565b6001600160a01b03841660009081526005602052604090205460ff1680156119e257506001600160a01b03831660009081526005602052604090205460ff165b156119f25761194c84848461205b565b6119fd8484846120ce565b80611a1957611a19600f54600e55601154601055601354601255565b50505050565b6009546008546000918291825b600654811015611b7157826001600060068481548110611a4e57611a4e6125c0565b60009182526020808320909101546001600160a01b031683528201929092526040019020541180611ab95750816002600060068481548110611a9257611a926125c0565b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b15611acf57600954600854945094505050509091565b611b156001600060068481548110611ae957611ae96125c0565b60009182526020808320909101546001600160a01b031683528201929092526040019020548490611c64565b9250611b5d6002600060068481548110611b3157611b316125c0565b60009182526020808320909101546001600160a01b031683528201929092526040019020548390611c64565b915080611b6981612603565b915050611a2c565b50600854600954611b8191611658565b821015611b98576009546008549350935050509091565b90939092509050565b6000806000806000611bb286612112565b90506000611bbf8761212e565b90506000611bcc8861214a565b90506000611be682611be085818d89611c64565b90611c64565b9993985091965094509092505050565b6000808080611c058986611c58565b90506000611c138987611c58565b90506000611c218988611c58565b90506000611c2f8989611c58565b90506000611c4382611be085818989611c64565b949d949c50929a509298505050505050505050565b60006109b98284612676565b60006109b982846125d6565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110611ca557611ca56125c0565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d22919061261e565b81600181518110611d3557611d356125c0565b6001600160a01b039283166020918202929092010152601454611d5b91309116846111da565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac94790611d94908590600090869030904290600401612695565b600060405180830381600087803b158015611dae57600080fd5b505af1925050508015611dbf575060015b610b4f575050565b601454611ddf9030906001600160a01b0316846111da565b60145460405163f305d71960e01b8152306004820181905260248201859052600060448301819052606483015260848201524260a48201526001600160a01b039091169063f305d71990839060c40160606040518083038185885af193505050508015611e69575060408051601f3d908101601f19168201909252611e6691810190612706565b60015b611e71575050565b5050505050565b600080600080600080611e8a87611670565b6001600160a01b038f16600090815260026020526040902054959b50939950919750955093509150611ebc9088611c64565b6001600160a01b038a16600090815260026020908152604080832093909355600190522054611eeb9087611c64565b6001600160a01b03808b1660009081526001602052604080822093909355908a1681522054611f1a9086611664565b6001600160a01b038916600090815260016020526040902055611f3c81612166565b611f4684836121ef565b611f5a8989611f558486612574565b612213565b876001600160a01b0316896001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051611f9f91815260200190565b60405180910390a3505050505050505050565b600080600080600080611fc487611670565b6001600160a01b038f16600090815260016020526040902054959b50939950919750955093509150611ff69087611c64565b6001600160a01b03808b16600090815260016020908152604080832094909455918b1681526002909152205461202c9084611664565b6001600160a01b038916600090815260026020908152604080832093909355600190522054611f1a9086611664565b60008060008060008061206d87611670565b6001600160a01b038f16600090815260026020526040902054959b5093995091975095509350915061209f9088611c64565b6001600160a01b038a16600090815260026020908152604080832093909355600190522054611ff69087611c64565b6000806000806000806120e087611670565b6001600160a01b038f16600090815260016020526040902054959b50939950919750955093509150611eeb9087611c64565b60006108366064611762600e5485611c5890919063ffffffff16565b6000610836606461176260105485611c5890919063ffffffff16565b6000610836606461176260125485611c5890919063ffffffff16565b6000612170611635565b9050600061217e8383611c58565b3060009081526001602052604090205490915061219b9082611664565b3060009081526001602090815260408083209390935560059052205460ff16156121ea57306000908152600260205260409020546121d99084611664565b306000908152600260205260409020555b505050565b6009546121fc9083611c64565b600955600a5461220c9082611664565b600a555050565b60008111801561223057506015546001600160a01b038481169116145b156121ea576000612240826122ab565b60185460405163015bc95960e41b81529192506001600160a01b0316906315bc959090612273908690859060040161265d565b600060405180830381600087803b15801561228d57600080fd5b505af11580156122a1573d6000803e3d6000fd5b5050505050505050565b6015546000906001600160a01b03163b6122c757506000919050565b60155460408051630240bc6b60e21b815290516001600160a01b039092169160009182918491630902f1ac9160048083019260609291908290030181865afa925050508015612333575060408051601f3d908101601f191682019092526123309181019061274b565b60015b61234257506000949350505050565b506001600160701b0391821693501690508161236357506000949350505050565b8161236e8287612676565b612378919061263b565b95945050505050565b600060208083528351808285015260005b818110156123ae57858101830151858201604001528201612392565b818111156123c0576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146111d757600080fd5b600080604083850312156123fe57600080fd5b8235612409816123d6565b946020939093013593505050565b60006020828403121561242957600080fd5b5035919050565b60008060006060848603121561244557600080fd5b8335612450816123d6565b92506020840135612460816123d6565b929592945050506040919091013590565b60006020828403121561248357600080fd5b81356109b9816123d6565b8035801515811461249e57600080fd5b919050565b600080604083850312156124b657600080fd5b823591506124c66020840161248e565b90509250929050565b6000602082840312156124e157600080fd5b6109b98261248e565b600080604083850312156124fd57600080fd5b8235612508816123d6565b91506020830135612518816123d6565b809150509250929050565b600181811c9082168061253757607f821691505b6020821081141561255857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156125875761258761255e565b500190565b6020808252601a9082015279165bdd481a185d99481c995858da195908199959481b1a5b5a5d60321b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000828210156125e8576125e861255e565b500390565b634e487b7160e01b600052603160045260246000fd5b60006000198214156126175761261761255e565b5060010190565b60006020828403121561263057600080fd5b81516109b9816123d6565b60008261265857634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03929092168252602082015260400190565b60008160001904831182151516156126905761269061255e565b500290565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156126e55784516001600160a01b0316835293830193918301916001016126c0565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561271b57600080fd5b8351925060208401519150604084015190509250925092565b80516001600160701b038116811461249e57600080fd5b60008060006060848603121561276057600080fd5b61276984612734565b925061277760208501612734565b9150604084015163ffffffff8116811461279057600080fd5b80915050925092509256fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212209dc74e7c8d82908f5f1866b20321aa20be30f6d024d059c87fa007648b347fb564736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106101fb5760003560e01c806306fdde0314610207578063095ea7b31461023257806314af7962146102625780631694505e1461028457806318160ddd146102bc5780631abe0e95146102db5780631f7ede2b146102f957806323b872dd146103195780632d83811914610339578063313ce567146103595780633206b4aa1461036e5780633685d4191461038457806339509351146103a457806341cb87fc146103c4578063437823ec146103e45780634549b0391461040457806349bd5a5e146104245780634a74bb021461044457806352390c02146104655780635342acb4146104855780636bc87c3a146104be57806370a08231146104d4578063715018a6146104f45780637bf0be8d146105095780637d1db4a51461052957806383ad79941461053f57806388f82020146105545780638da5cb5b1461058d5780638ee88c53146105a257806393145582146105c257806395d89b41146105d757806398118cb4146105ec578063a0dc392d14610601578063a457c2d714610621578063a9059cbb14610641578063c49b9a8014610661578063c81d583914610681578063d12a7688146106a1578063dd62ed3e146106b7578063ea2f0b37146106fd578063ec28438a1461071d578063f0f165af1461073d578063f2fde38b1461075d578063fdcc33821461077d57600080fd5b3661020257005b600080fd5b34801561021357600080fd5b5061021c610793565b6040516102299190612381565b60405180910390f35b34801561023e57600080fd5b5061025261024d3660046123eb565b610825565b6040519015158152602001610229565b34801561026e57600080fd5b5061028261027d366004612417565b61083c565b005b34801561029057600080fd5b506014546102a4906001600160a01b031681565b6040516001600160a01b039091168152602001610229565b3480156102c857600080fd5b506008545b604051908152602001610229565b3480156102e757600080fd5b506007546001600160a01b03166102a4565b34801561030557600080fd5b50610282610314366004612417565b61088c565b34801561032557600080fd5b50610252610334366004612430565b6108d3565b34801561034557600080fd5b506102cd610354366004612417565b61093c565b34801561036557600080fd5b50600d546102cd565b34801561037a57600080fd5b506102cd600e5481565b34801561039057600080fd5b5061028261039f366004612471565b6109c0565b3480156103b057600080fd5b506102526103bf3660046123eb565b610b53565b3480156103d057600080fd5b506102826103df366004612471565b610b89565b3480156103f057600080fd5b506102826103ff366004612471565b610d0c565b34801561041057600080fd5b506102cd61041f3660046124a3565b610d38565b34801561043057600080fd5b506015546102a4906001600160a01b031681565b34801561045057600080fd5b5060155461025290600160a81b900460ff1681565b34801561047157600080fd5b50610282610480366004612471565b610dc5565b34801561049157600080fd5b506102526104a0366004612471565b6001600160a01b031660009081526004602052604090205460ff1690565b3480156104ca57600080fd5b506102cd60125481565b3480156104e057600080fd5b506102cd6104ef366004612471565b610ef4565b34801561050057600080fd5b50610282610f53565b34801561051557600080fd5b506007546102a4906001600160a01b031681565b34801561053557600080fd5b506102cd60165481565b34801561054b57600080fd5b50600e546102cd565b34801561056057600080fd5b5061025261056f366004612471565b6001600160a01b031660009081526005602052604090205460ff1690565b34801561059957600080fd5b506102a4610f67565b3480156105ae57600080fd5b506102826105bd366004612417565b610f76565b3480156105ce57600080fd5b506010546102cd565b3480156105e357600080fd5b5061021c610fbd565b3480156105f857600080fd5b506012546102cd565b34801561060d57600080fd5b5061028261061c366004612471565b610fcc565b34801561062d57600080fd5b5061025261063c3660046123eb565b610ff6565b34801561064d57600080fd5b5061025261065c3660046123eb565b611045565b34801561066d57600080fd5b5061028261067c3660046124cf565b611052565b34801561068d57600080fd5b506018546102a4906001600160a01b031681565b3480156106ad57600080fd5b506102cd60175481565b3480156106c357600080fd5b506102cd6106d23660046124ea565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b34801561070957600080fd5b50610282610718366004612471565b6110b2565b34801561072957600080fd5b50610282610738366004612417565b6110db565b34801561074957600080fd5b50610282610758366004612417565b611154565b34801561076957600080fd5b50610282610778366004612471565b611161565b34801561078957600080fd5b506102cd60105481565b6060600b80546107a290612523565b80601f01602080910402602001604051908101604052809291908181526020018280546107ce90612523565b801561081b5780601f106107f05761010080835404028352916020019161081b565b820191906000526020600020905b8154815290600101906020018083116107fe57829003601f168201915b5050505050905090565b60006108323384846111da565b5060015b92915050565b6108446112fe565b600f81601254600e546108579190612574565b6108619190612574565b106108875760405162461bcd60e51b815260040161087e9061258c565b60405180910390fd5b601055565b6108946112fe565b600f601054601254836108a79190612574565b6108b19190612574565b106108ce5760405162461bcd60e51b815260040161087e9061258c565b600e55565b60006108e084848461135d565b610932843361092d8560405180606001604052806028815260200161279c602891396001600160a01b038a1660009081526003602090815260408083203384529091529020549190611609565b6111da565b5060019392505050565b60006009548211156109a35760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201526965666c656374696f6e7360b01b606482015260840161087e565b60006109ad611635565b90506109b98382611658565b9392505050565b6109c86112fe565b6001600160a01b03811660009081526005602052604090205460ff16610a2e5760405162461bcd60e51b815260206004820152601b60248201527a1058d8dbdd5b9d081a5cc8185b1c9958591e481a5b98db1d591959602a1b604482015260640161087e565b60005b600654811015610b4f57816001600160a01b031660068281548110610a5857610a586125c0565b6000918252602090912001546001600160a01b03161415610b3d5760068054610a83906001906125d6565b81548110610a9357610a936125c0565b600091825260209091200154600680546001600160a01b039092169183908110610abf57610abf6125c0565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559184168152600282526040808220829055600590925220805460ff191690556006805480610b1757610b176125ed565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b80610b4781612603565b915050610a31565b5050565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909161083291859061092d9086611664565b610b916112fe565b6000819050806001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf8919061261e565b6001600160a01b031663c9c6539630836001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c69919061261e565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda919061261e565b601580546001600160a01b039283166001600160a01b0319918216179091556014805493909216921691909117905550565b610d146112fe565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6000600854831115610d8c5760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e74206d757374206265206c657373207468616e20737570706c7900604482015260640161087e565b81610dab576000610d9c84611670565b50939550610836945050505050565b6000610db684611670565b50929550610836945050505050565b610dcd6112fe565b6001600160a01b03811660009081526005602052604090205460ff1615610e345760405162461bcd60e51b815260206004820152601b60248201527a1058d8dbdd5b9d081a5cc8185b1c9958591e48195e18db1d591959602a1b604482015260640161087e565b6001600160a01b03811660009081526001602052604090205415610e8e576001600160a01b038116600090815260016020526040902054610e749061093c565b6001600160a01b0382166000908152600260205260409020555b6001600160a01b03166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055565b6001600160a01b03811660009081526005602052604081205460ff1615610f3157506001600160a01b031660009081526002602052604090205490565b6001600160a01b0382166000908152600160205260409020546108369061093c565b610f5b6112fe565b610f6560006116db565b565b6000546001600160a01b031690565b610f7e6112fe565b600f60105482600e54610f919190612574565b610f9b9190612574565b10610fb85760405162461bcd60e51b815260040161087e9061258c565b601255565b6060600c80546107a290612523565b610fd46112fe565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000610832338461092d856040518060600160405280602581526020016127c4602591393360009081526003602090815260408083206001600160a01b038d1684529091529020549190611609565b600061083233848461135d565b61105a6112fe565b60158054821515600160a81b0260ff60a81b199091161790556040517f53726dfcaf90650aa7eb35524f4d3220f07413c8d6cb404cc8c18bf5591bc159906110a790831515815260200190565b60405180910390a150565b6110ba6112fe565b6001600160a01b03166000908152600460205260409020805460ff19169055565b6110e36112fe565b6605543df729c00081101561114f5760405162461bcd60e51b815260206004820152602c60248201527f6d61785478416d6f756e742073686f756c64206265206772656174657220746860448201526b616e2031353030303030653960a01b606482015260840161087e565b601655565b61115c6112fe565b601755565b6111696112fe565b6001600160a01b0381166111ce5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161087e565b6111d7816116db565b50565b6001600160a01b03831661123c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161087e565b6001600160a01b03821661129d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161087e565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b33611307610f67565b6001600160a01b031614610f655760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161087e565b6001600160a01b0383166113c15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161087e565b6001600160a01b0382166114235760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161087e565b600081116114855760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161087e565b61148d610f67565b6001600160a01b0316836001600160a01b0316141580156114c757506114b1610f67565b6001600160a01b0316826001600160a01b031614155b1561152f5760165481111561152f5760405162461bcd60e51b815260206004820152602860248201527f5472616e7366657220616d6f756e74206578636565647320746865206d6178546044820152673c20b6b7bab73a1760c11b606482015260840161087e565b600061153a30610ef4565b9050601654811061154a57506016545b601754811080159081906115685750601554600160a01b900460ff16155b801561158257506015546001600160a01b03868116911614155b80156115975750601554600160a81b900460ff165b156115aa5760175491506115aa8261172b565b6001600160a01b03851660009081526004602052604090205460019060ff16806115ec57506001600160a01b03851660009081526004602052604090205460ff165b156115f5575060005b611601868686846118d1565b505050505050565b6000818484111561162d5760405162461bcd60e51b815260040161087e9190612381565b505050900390565b6000806000611642611a1f565b90925090506116518282611658565b9250505090565b60006109b9828461263b565b60006109b98284612574565b6000806000806000806000806000806116888b611ba1565b935093509350935060008060006116a98e8787876116a4611635565b611bf6565b9194509250905082828289896116bf8a8a612574565b9c509c509c509c509c509c505050505050505091939550919395565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6015805460ff60a01b1916600160a01b1790556012546010546000916117689161175491611664565b601054611762908590611c58565b90611658565b905060006117768383611c64565b90506000611785826002611658565b905060006117938383611c64565b905060006117a18386611664565b9050476117ad82611c70565b60006117b94783611c64565b905060006117d46117ca878a612574565b611762848b611c58565b905060006117e28383611c64565b9050811561186d576007546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050158015611824573d6000803e3d6000fd5b506007546040517ffd581ed4b14aa526b334ee3509a6979a356edff4ca4233a58e8b2a12a2e5a49391611864916001600160a01b0390911690859061265d565b60405180910390a15b6118778682611dc7565b60408051888152602081018390529081018790527f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619060600160405180910390a150506015805460ff60a01b191690555050505050505050565b806118fb576118fb600e8054600f5560108054601155601280546013556000928390559082905555565b6001600160a01b03841660009081526005602052604090205460ff16801561193c57506001600160a01b03831660009081526005602052604090205460ff16155b156119515761194c848484611e78565b6119fd565b6001600160a01b03841660009081526005602052604090205460ff1615801561199257506001600160a01b03831660009081526005602052604090205460ff165b156119a25761194c848484611fb2565b6001600160a01b03841660009081526005602052604090205460ff1680156119e257506001600160a01b03831660009081526005602052604090205460ff165b156119f25761194c84848461205b565b6119fd8484846120ce565b80611a1957611a19600f54600e55601154601055601354601255565b50505050565b6009546008546000918291825b600654811015611b7157826001600060068481548110611a4e57611a4e6125c0565b60009182526020808320909101546001600160a01b031683528201929092526040019020541180611ab95750816002600060068481548110611a9257611a926125c0565b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b15611acf57600954600854945094505050509091565b611b156001600060068481548110611ae957611ae96125c0565b60009182526020808320909101546001600160a01b031683528201929092526040019020548490611c64565b9250611b5d6002600060068481548110611b3157611b316125c0565b60009182526020808320909101546001600160a01b031683528201929092526040019020548390611c64565b915080611b6981612603565b915050611a2c565b50600854600954611b8191611658565b821015611b98576009546008549350935050509091565b90939092509050565b6000806000806000611bb286612112565b90506000611bbf8761212e565b90506000611bcc8861214a565b90506000611be682611be085818d89611c64565b90611c64565b9993985091965094509092505050565b6000808080611c058986611c58565b90506000611c138987611c58565b90506000611c218988611c58565b90506000611c2f8989611c58565b90506000611c4382611be085818989611c64565b949d949c50929a509298505050505050505050565b60006109b98284612676565b60006109b982846125d6565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110611ca557611ca56125c0565b6001600160a01b03928316602091820292909201810191909152601454604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d22919061261e565b81600181518110611d3557611d356125c0565b6001600160a01b039283166020918202929092010152601454611d5b91309116846111da565b60145460405163791ac94760e01b81526001600160a01b039091169063791ac94790611d94908590600090869030904290600401612695565b600060405180830381600087803b158015611dae57600080fd5b505af1925050508015611dbf575060015b610b4f575050565b601454611ddf9030906001600160a01b0316846111da565b60145460405163f305d71960e01b8152306004820181905260248201859052600060448301819052606483015260848201524260a48201526001600160a01b039091169063f305d71990839060c40160606040518083038185885af193505050508015611e69575060408051601f3d908101601f19168201909252611e6691810190612706565b60015b611e71575050565b5050505050565b600080600080600080611e8a87611670565b6001600160a01b038f16600090815260026020526040902054959b50939950919750955093509150611ebc9088611c64565b6001600160a01b038a16600090815260026020908152604080832093909355600190522054611eeb9087611c64565b6001600160a01b03808b1660009081526001602052604080822093909355908a1681522054611f1a9086611664565b6001600160a01b038916600090815260016020526040902055611f3c81612166565b611f4684836121ef565b611f5a8989611f558486612574565b612213565b876001600160a01b0316896001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051611f9f91815260200190565b60405180910390a3505050505050505050565b600080600080600080611fc487611670565b6001600160a01b038f16600090815260016020526040902054959b50939950919750955093509150611ff69087611c64565b6001600160a01b03808b16600090815260016020908152604080832094909455918b1681526002909152205461202c9084611664565b6001600160a01b038916600090815260026020908152604080832093909355600190522054611f1a9086611664565b60008060008060008061206d87611670565b6001600160a01b038f16600090815260026020526040902054959b5093995091975095509350915061209f9088611c64565b6001600160a01b038a16600090815260026020908152604080832093909355600190522054611ff69087611c64565b6000806000806000806120e087611670565b6001600160a01b038f16600090815260016020526040902054959b50939950919750955093509150611eeb9087611c64565b60006108366064611762600e5485611c5890919063ffffffff16565b6000610836606461176260105485611c5890919063ffffffff16565b6000610836606461176260125485611c5890919063ffffffff16565b6000612170611635565b9050600061217e8383611c58565b3060009081526001602052604090205490915061219b9082611664565b3060009081526001602090815260408083209390935560059052205460ff16156121ea57306000908152600260205260409020546121d99084611664565b306000908152600260205260409020555b505050565b6009546121fc9083611c64565b600955600a5461220c9082611664565b600a555050565b60008111801561223057506015546001600160a01b038481169116145b156121ea576000612240826122ab565b60185460405163015bc95960e41b81529192506001600160a01b0316906315bc959090612273908690859060040161265d565b600060405180830381600087803b15801561228d57600080fd5b505af11580156122a1573d6000803e3d6000fd5b5050505050505050565b6015546000906001600160a01b03163b6122c757506000919050565b60155460408051630240bc6b60e21b815290516001600160a01b039092169160009182918491630902f1ac9160048083019260609291908290030181865afa925050508015612333575060408051601f3d908101601f191682019092526123309181019061274b565b60015b61234257506000949350505050565b506001600160701b0391821693501690508161236357506000949350505050565b8161236e8287612676565b612378919061263b565b95945050505050565b600060208083528351808285015260005b818110156123ae57858101830151858201604001528201612392565b818111156123c0576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146111d757600080fd5b600080604083850312156123fe57600080fd5b8235612409816123d6565b946020939093013593505050565b60006020828403121561242957600080fd5b5035919050565b60008060006060848603121561244557600080fd5b8335612450816123d6565b92506020840135612460816123d6565b929592945050506040919091013590565b60006020828403121561248357600080fd5b81356109b9816123d6565b8035801515811461249e57600080fd5b919050565b600080604083850312156124b657600080fd5b823591506124c66020840161248e565b90509250929050565b6000602082840312156124e157600080fd5b6109b98261248e565b600080604083850312156124fd57600080fd5b8235612508816123d6565b91506020830135612518816123d6565b809150509250929050565b600181811c9082168061253757607f821691505b6020821081141561255857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156125875761258761255e565b500190565b6020808252601a9082015279165bdd481a185d99481c995858da195908199959481b1a5b5a5d60321b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000828210156125e8576125e861255e565b500390565b634e487b7160e01b600052603160045260246000fd5b60006000198214156126175761261761255e565b5060010190565b60006020828403121561263057600080fd5b81516109b9816123d6565b60008261265857634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03929092168252602082015260400190565b60008160001904831182151516156126905761269061255e565b500290565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156126e55784516001600160a01b0316835293830193918301916001016126c0565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561271b57600080fd5b8351925060208401519150604084015190509250925092565b80516001600160701b038116811461249e57600080fd5b60008060006060848603121561276057600080fd5b61276984612734565b925061277760208501612734565b9150604084015163ffffffff8116811461279057600080fd5b80915050925092509256fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212209dc74e7c8d82908f5f1866b20321aa20be30f6d024d059c87fa007648b347fb564736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2181,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6327,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_rOwned",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6331,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_tOwned",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6337,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6341,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_isExcludedFromFee",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6345,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_isExcluded",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6348,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_excluded",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6350,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_gemWalletAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 6359,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_tTotal",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6361,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_rTotal",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 6363,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_tFeeTotal",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 6365,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_name",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 6367,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_symbol",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 6369,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_decimals",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 6372,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_reflectionFee",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6374,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_previousReflectionFee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 6377,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_gemFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6379,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_previousGemFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 6382,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_liquidityFee",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 6384,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_previousLiquidityFee",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 6387,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IUniswapV2Router02)6151"
      },
      {
        "astId": 6389,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "uniswapV2Pair",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 6391,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "inSwapAndLiquify",
        "offset": 20,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 6394,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "swapAndLiquifyEnabled",
        "offset": 21,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 6396,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "_maxTxAmount",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 6398,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "numTokensSellToAddToLiquidity",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 6401,
        "contract": "contracts/others/Resources.sol:PocMon",
        "label": "compensationToken",
        "offset": 0,
        "slot": "24",
        "type": "t_contract(IGEM)8575"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGEM)8575": {
        "encoding": "inplace",
        "label": "contract IGEM",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)6151": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}