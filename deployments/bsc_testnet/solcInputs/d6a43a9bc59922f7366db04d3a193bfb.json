{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/Artifacts.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./interfaces/IBlackList.sol\";\nimport \"./interfaces/IArtifacts.sol\";\nimport \"./interfaces/ITools.sol\";\n\n/// @title Artifact tokens can be aquired during mining\n///        Artifacts are used to craft tools\ncontract Artifacts is\n    Initializable,\n    OwnableUpgradeable,\n    ERC1155Upgradeable,\n    IArtifacts,\n    PausableUpgradeable\n{\n    /// @dev The address of the Blacklist contract\n    IBlackList private _blacklist;\n    /// @dev The address of the Tools contract\n    ITools private _tools;\n\n    /// @dev Base URI for IPFS\n    string private _baseURI;\n\n    /// @dev Number of types of artifacts\n    /// @dev Starts with 0\n    uint256 private _artifactTypes;\n\n    /// @dev Mapping from artifact type to it's URI\n    mapping(uint256 => string) private _typesToUris;\n\n    /// @dev Checks that user is not in blacklist\n    /// @param user The user to check\n    modifier ifNotBlacklisted(address user) {\n        require(!_blacklist.check(user), \"Artifacts: user in blacklist\");\n        _;\n    }\n\n    function initialize(\n        address _toolsContractAddress,\n        string memory _baseUrl,\n        address _blackListContractAddress\n    ) external initializer {\n        _tools = ITools(_toolsContractAddress);\n        _baseURI = _baseUrl;\n        _blacklist = IBlackList(_blackListContractAddress);\n\n        __ERC1155_init(\"\");\n        __Ownable_init();\n        __Pausable_init();\n    }\n\n    /// @notice See {IArtifacts-getArtifactsTypesAmount}\n    function getArtifactsTypesAmount() external view returns (uint256) {\n        return _artifactTypes;\n    }\n\n    /// @notice See {IArtifacts-getBaseUri}\n    function getBaseUri() external view returns (string memory) {\n        return _baseURI;\n    }\n\n    /// @notice See {IArtifacts-mint}\n    function mint(\n        uint256 artifactType,\n        address to,\n        uint256 amount\n    ) external onlyOwner whenNotPaused ifNotBlacklisted(to) {\n        require(\n            artifactType <= _artifactTypes,\n            \"Artifacts: This artifact doesn't exist\"\n        );\n        _mint(to, artifactType, amount, \"\");\n    }\n\n    /// @notice See {IArtifacts-mintBatch}\n    function mintBatch(\n        address to,\n        uint256[] memory artifactTypes,\n        uint256[] memory amounts\n    ) external onlyOwner whenNotPaused ifNotBlacklisted(to) {\n        for (uint256 counter = 0; counter < artifactTypes.length; counter++) {\n            require(\n                artifactTypes[counter] <= _artifactTypes,\n                \"Artifacts: this artifact type doesn't exists\"\n            );\n        }\n\n        _mintBatch(to, artifactTypes, amounts, \"\");\n    }\n\n    /// @notice See {IArtifacts-lootArtifact}\n    function lootArtifact(\n        address user,\n        uint256 artifactType\n    ) external ifNotBlacklisted(user) {\n        require(\n            _msgSender() == _tools.getMiningAddress(),\n            \"Artifacts: only mining contract can call this function\"\n        );\n        _mint(user, artifactType, 1, \"\");\n    }\n\n    /// @notice See {IArtifacts-pause}\n    function pause() external onlyOwner {\n        if (!paused()) {\n            _pause();\n        } else {\n            _unpause();\n        }\n    }\n\n    /// @notice See {IArtifacts-addNewArtifact}\n    function addNewArtifact(string memory newUri) external onlyOwner {\n        _addNewArtifact(newUri);\n    }\n\n    /// @notice See {IArtifacts-setToolsAddress}\n    function setToolsAddress(address toolsAddress) external onlyOwner {\n        require(toolsAddress != address(0), \"Artifacts: zero address\");\n        _tools = ITools(toolsAddress);\n    }\n\n    /// @notice See {IArtifacts-setBaseUri}\n    function setBaseUri(string calldata newBaseUri) external onlyOwner {\n        _setBaseUri(newBaseUri);\n    }\n\n    /// @notice See {IArtifacts-setUri}\n    function setUri(\n        uint256 artifactType,\n        string calldata newUri\n    ) external onlyOwner {\n        _setUri(artifactType, newUri);\n    }\n\n    /// @notice See {IArtifacts-uri}\n    function uri(\n        uint256 artifactType\n    )\n        public\n        view\n        override(ERC1155Upgradeable, IArtifacts)\n        returns (string memory)\n    {\n        require(\n            artifactType <= _artifactTypes,\n            \"Artifacts: This artifact doesn't exist\"\n        );\n        return _typesToUris[artifactType];\n    }\n\n    /// @dev Private implementation of `addNewArtifact`\n    function _addNewArtifact(string memory newUri) private {\n        _artifactTypes += 1;\n        _tools.increaseArtifactsTypesAmount();\n        // New artifact gets URI formed from base URI and uri from parameters\n        // Example: ipfs://pinata.cloud/QmYqiEcxH58aTuQha2qxHp6c3zfv5NpNWxAhGQtGpBubwe\n        _typesToUris[_artifactTypes] = string(\n            abi.encodePacked(_baseURI, newUri)\n        );\n        emit AddNewArtifact(_artifactTypes, newUri);\n    }\n\n    /// @dev Private implementation of `setBaseUri`\n    function _setBaseUri(string calldata newBaseUri) private {\n        _baseURI = newBaseUri;\n        emit BaseUriChanged(newBaseUri);\n    }\n\n    /// @dev Private implementation of `setUri`\n    function _setUri(uint256 artifactType, string calldata newUri) private {\n        require(\n            artifactType <= _artifactTypes,\n            \"Artifacts: This artifact doesn't exist\"\n        );\n        _typesToUris[artifactType] = newUri;\n        emit UriChanged(artifactType, newUri);\n    }\n}\n"
    },
    "contracts/BlackList.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./interfaces/IBlackList.sol\";\n\n/// @title Blacklist contract. Blacklisted addresses cannot use main functions\n///        of other contracts\ncontract BlackList is IBlackList, Ownable {\n    /// @dev Mapping of users in the blacklist. If key value is True - user is blacklisted.\n    ///      Otherwise, user is not blacklisted\n    mapping(address => bool) private _blacklisted;\n\n    /// @notice See {IBlacklist-check}\n    function check(address user) external view returns (bool) {\n        return _blacklisted[user];\n    }\n\n    /// @notice See {IBlacklist-addToBlacklist}\n    function addToBlacklist(address user) external onlyOwner {\n        require(_blacklisted[user] == false, \"User already in blacklist\");\n        _blacklisted[user] = true;\n        emit AddedToBlacklist(user);\n    }\n\n    /// @notice See {IBlacklist-removeFromBlacklist}\n    function removeFromBlacklist(address user) external onlyOwner {\n        require(_blacklisted[user] == true, \"User is not in blacklist\");\n        _blacklisted[user] = false;\n        emit RemovedFromBlacklist(user);\n    }\n}\n"
    },
    "contracts/Gem.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"./interfaces/IGem.sol\";\n\n/// @title Gem token contract\ncontract Gem is IGem, Ownable, ERC20 {\n    /// @notice The address of the contract that can compensate fees with Gems\n    address public compensator;\n    /// @notice The BNB/GEM rate of compensation\n    uint256 public compensationRate;\n\n    /// @notice Addresses from this list cannot transfer of receive tokens\n    mapping(address => bool) public blocked;\n\n    constructor(uint256 compensationRate_) ERC20(\"GEM\", \"GEM\") Ownable() {\n        compensationRate = compensationRate_;\n    }\n\n    /// @notice See {IGem-setCompensator}\n    function setCompensator(address compensator_) external onlyOwner {\n        compensator = compensator_;\n    }\n\n    /// @notice See {IGem-setCompensationRate}\n    function setCompensationRate(uint256 compensationRate_) external onlyOwner {\n        compensationRate = compensationRate_;\n    }\n\n    /// @notice See {IGem-blockAddress}\n    function blockAddress(address addr, bool isBlocked) external onlyOwner {\n        blocked[addr] = isBlocked;\n\n        if (isBlocked) {\n            emit Blocked(addr);\n        } else {\n            emit Unblocked(addr);\n        }\n    }\n\n    /// @notice See {IGem-compensateBnb}\n    function compensateBnb(address to, uint256 bnbAmount) external {\n        if (msg.sender == compensator) {\n            _mint(to, (bnbAmount * compensationRate) / 10 ** 9);\n        }\n    }\n\n    /// @notice See {IGem-decimals}\n    function decimals() public pure override(ERC20, IGem) returns (uint8) {\n        return 9;\n    }\n\n    /// @dev Checks that `to` is not blocked before transferring tokens\n    /// @param from Sender of tokens\n    /// @param to Receiver of tokens\n    /// @param amount The amount of tokens sent\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal view override {\n        require(!blocked[to], \"Can not transfer to blocked addresses\");\n    }\n\n    /// @dev Checks that `spender` is not blocked and approves\n    ///      transfer of tokens\n    /// @param owner The owner of tokens\n    /// @param spender The spender of tokens\n    /// @param amount The amount of tokens to spend\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal override {\n        require(!blocked[spender], \"Can not approve blocked addresses\");\n        super._approve(owner, spender, amount);\n    }\n}\n"
    },
    "contracts/interfaces/IArtifacts.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\n\n/// @title Interface for the Artifacts contract\ninterface IArtifacts is IERC1155Upgradeable {\n    event AddNewArtifact(uint256 artifactType, string newUri);\n    event BaseUriChanged(string newBaseUri);\n    event UriChanged(uint256 artifactType, string newUri);\n\n    /// @notice Returns the amount of types of artifacts\n    /// @return The amount of types of artifacts\n    function getArtifactsTypesAmount() external view returns (uint256);\n\n    /// @notice Returns the base URI for IPFS\n    /// @return Base URI for IPFS\n    function getBaseUri() external view returns (string memory);\n\n    /// @notice Mints `amount` of artifacts of `artifactType` to `to`\n    /// @param artifactType The type of artifact to mint\n    /// @param to The receiver of artifacts\n    /// @param amount The amount of artifacts to mint\n    function mint(uint256 artifactType, address to, uint256 amount) external;\n\n    /// @notice Mints batches of artifacts\n    /// @param to The receiver of artifacts\n    /// @param artifactTypes The types of artifacts to mint\n    /// @param amounts The amount of artifacts of each type to mint\n    function mintBatch(\n        address to,\n        uint256[] memory artifactTypes,\n        uint256[] memory amounts\n    ) external;\n\n    /// @notice Mints a single artifact if Mining contract requests\n    /// @param user The receiver of artifact\n    /// @param artifactType The type of artifact to mint\n    function lootArtifact(address user, uint256 artifactType) external;\n\n    /// @notice Pauses contract if it's active. Activates it if it's paused\n    function pause() external;\n\n    /// @notice Adds a new artifact with the provided URI\n    /// @param newUri The URI of a new artifact\n    function addNewArtifact(string memory newUri) external;\n\n    /// @notice Changes the address of Tools contract\n    /// @param toolsAddress The new address of Tools contract\n    function setToolsAddress(address toolsAddress) external;\n\n    /// @notice Changes the base URI for IPFS\n    /// @param newBaseUri The new base URI for IPFS\n    function setBaseUri(string calldata newBaseUri) external;\n\n    /// @notice Changes the URI for the specific artifact type\n    /// @param artifactType The type of the artifact\n    /// @param newUri The new URI\n    function setUri(uint256 artifactType, string calldata newUri) external;\n\n    /// @notice Returns the URI for a specific artifact type\n    /// @param artifactType The type of the artifact to get a URI for\n    /// @return The URI for a specific artifact type\n    function uri(uint256 artifactType) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IBlackList.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\n/// @title Interface for the Blacklist contract\ninterface IBlackList {\n    event AddedToBlacklist(address user);\n    event RemovedFromBlacklist(address user);\n\n    /// @notice Checks that user is blacklisted\n    /// @param user The address of the user to check\n    /// @return True if user is blacklisted. Otherwise - false\n    function check(address user) external returns (bool);\n\n    /// @notice Adds a user to the blacklist\n    /// @param user The address of the user to add to the blacklist\n    function addToBlacklist(address user) external;\n\n    /// @notice Removes a user from the blacklist\n    /// @param user The address of the user to remove from the blacklist\n    function removeFromBlacklist(address user) external;\n}\n"
    },
    "contracts/interfaces/IGem.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\n/// @title Interface for Gem token contract\ninterface IGem {\n    /// @notice Indicates that address has been blocked from transferring and receiving tokens\n    event Blocked(address addr);\n    /// @notice Indicates that address has been unblocked from transferring and receiving tokens\n    event Unblocked(address addr);\n\n    /// @notice Changes compensator\n    /// @param compensator The new compensator\n    function setCompensator(address compensator) external;\n\n    /// @notice Changes compensation rate\n    /// @param compensationRate The new compensation rate\n    function setCompensationRate(uint256 compensationRate) external;\n\n    /// @notice Block address from transferring and receiving tokens\n    /// @param addr The address to block\n    /// @param isBlocked True to block address. False to unblock address\n    function blockAddress(address addr, bool isBlocked) external;\n\n    /// @notice Mints some amount of Gems to compensate fee in BNB tokens\n    /// @param to The address to mint Gems to\n    /// @param bnbAmount The amount of BNB to compensate\n    function compensateBnb(address to, uint256 bnbAmount) external;\n\n    /// @notice Returns the amount of decimals of the token\n    /// @return The amount of decimals of the token\n    function decimals() external pure returns (uint8);\n}\n"
    },
    "contracts/interfaces/IMining.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\n/// @title Interface for Mining contract\ninterface IMining {\n    /// @dev Represents a mining session of a user\n    ///      One user can have multiple session simultaniously\n    struct MiningSession {\n        uint32 toolId; // The ID of the tool used for mining. Unique key of session\n        bool started; // True if session is started\n        bool ended; // True if session has ended\n        uint32 endTime; // The time when session has ended\n        uint32 energyCost; // The cost of mining process in Berry tokens\n        uint16 strengthCost; // The cost of mining process in tool strength\n        uint32 nonce; // Unique integer\n    }\n\n    /// @dev Used to prevent 'Stack too deep' errors\n    struct Args {\n        uint256 toolId;\n        address user;\n        uint256 nonce;\n        bytes signature;\n        uint256[] resources;\n        uint256[] artifacts;\n    }\n\n    /// @notice Indicates that new mining session has started\n    event MiningStarted(address user, MiningSession session);\n    /// @notice Indicates that mining session has ended\n    event MiningEnded(address user, MiningSession session);\n    /// @notice Indicates that user has claimed his rewards\n    event RewardsClaimed(\n        address user,\n        uint256[] resources,\n        uint256[] artifacts\n    );\n\n    /// @notice Pauses contract if it's active. Activates it if it's paused\n    function pause() external;\n\n    /// @notice Start a new mining session with a tool\n    /// @param toolId The ID of the tool to mine with\n    /// @param user The user who started mining\n    /// @param rewards Encoded rewards for mining\n    /// @param signature Backend signature\n    /// @param nonce Unique integer\n    function startMining(\n        uint256 toolId,\n        address user,\n        bytes calldata rewards,\n        bytes calldata signature,\n        uint256 nonce\n    ) external;\n\n    /// @notice Ends mining session started with the tool\n    /// @param toolId The ID of the tool used in the session\n    function endMining(uint256 toolId) external;\n}\n"
    },
    "contracts/interfaces/IResources.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title Interface for Resources contract\ninterface IResources is IERC20 {\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n    event GemFeeSent(address to, uint256 bnbSent);\n}\n"
    },
    "contracts/interfaces/ITools.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\n\n/// @title Interface for Tools contract\ninterface ITools is IERC1155Upgradeable {\n    /// @dev Types of resources\n    enum Resources {\n        Berry, // a.k.a. FOOD\n        Tree, // a.k.a. TECH\n        Gold // a.k.a. AURA\n    }\n\n    /// @dev Recipe to craft a tool\n    struct Recipe {\n        // Amount of Tree to spend\n        uint256 resourcesAmount;\n        // Mapping (artifacts id => amonut)\n        mapping(uint256 => uint256) artifacts;\n    }\n\n    /// @dev Struct of a tool\n    struct Tool {\n        uint32 strengthCost; // Cost of using this tool for mining. Strength decreases each time\n        uint32 maxStrength; // Max strength of a tool\n        uint32 miningDuration; // The duraion of mining session with this tool\n        uint256 energyCost; // Cost in Berry tokens to start mining session with this tool\n    }\n\n    /// @dev Represents a tool owned by a user\n    struct OwnedTool {\n        uint128 toolType; // Type of the tool\n        uint128 strength; // Current strength of the tool\n    }\n\n    /// @notice Indicates that a new tool was added\n    /// @param toolType Type of the tool\n    /// @param newURI URI of the tool\n    event AddTool(uint256 toolType, string newURI);\n\n    /// @notice Indicates that a tool was crafted\n    /// @param user User who crafted a tool\n    /// @param toolType Type of the tool\n    /// @param toolId Unique ID of the tool\n    event Craft(address user, uint256 toolType, uint256 toolId);\n\n    /// @notice Indicates that tool recipe was created or updated\n    /// @param toolType Type of the tool\n    /// @param resourcesAmount The amount of Tree tokens to craft a tool\n    /// @param artifactsAmounts The amount of artifacts to craft a tool\n    event RecipeCreatedOrUpdated(\n        uint256 toolType,\n        uint256 resourcesAmount,\n        uint256[] artifactsAmounts\n    );\n\n    /// @notice Indicates that a new base URI was set\n    /// @param baseURI A new base URI\n    event BaseURI(string baseURI);\n\n    /// @notice Indicates that a tool has been fully repaired\n    /// @param toolId The ID of the repaired tool\n    event ToolRepaired(uint256 toolId);\n\n    /// @notice Indicates that tool type's properties have been changed\n    /// @param toolType The type of the tools to change the properties of\n    event ToolPropertiesSet(uint256 toolType);\n\n    /// @dev Indicates that `amount` of tools of `toolType` was minted to `to`\n    /// @param to Receiver of tool\n    /// @param toolType Type of the tool\n    /// @param amount The amount of tools minted\n    event MintType(address to, uint256 toolType, uint256 amount);\n\n    /// @dev Indicates that one tool of `toolType` with `toolId` was minted to `to`\n    /// @param to Receiver of tool\n    /// @param toolType Type of the tool\n    /// @param toolId The ID of the tool minted\n    event MintId(address to, uint256 toolType, uint256 toolId);\n\n    /// @dev Indicates that one tool of type `toolType` with `toolId` was transferred\n    ///      from `from` to `to`\n    /// @param from The sender of tokens\n    /// @param to The receiver of tokens\n    /// @param toolType Type of the tool\n    /// @param toolId The ID of the tool transferred\n    event Transfer(address from, address to, uint256 toolType, uint256 toolId);\n\n    /// @notice Returns properties of the tool\n    /// @param user User owning a tool\n    /// @param toolId The ID of the tool\n    /// @return toolType Type of the tool\n    /// @return strength Current strength of the tool\n    /// @return strengthCost Cost in strength to start mining with the tool\n    /// @return miningDuration Duration of a mining session with the tool\n    /// @return energyCost Cost in Berry tokens to start mining session with the tool\n    function getToolProperties(\n        address user,\n        uint256 toolId\n    )\n        external\n        view\n        returns (\n            uint256 toolType,\n            uint256 strength,\n            uint256 strengthCost,\n            uint256 miningDuration,\n            uint256 energyCost\n        );\n\n    /// @notice Returns properties of type of the tool\n    /// @param toolType Type of the tool to get the properties of\n    /// @return maxStrength Max strength of the tool type\n    /// @return strengthCost Cost in strength to start mining with the tool\n    /// @return miningDuration Duration of a mining session with the tool\n    /// @return energyCost Cost in Berry tokens to start mining session with the tool\n    function getToolTypeProperties(\n        uint256 toolType\n    )\n        external\n        view\n        returns (\n            uint256 maxStrength,\n            uint256 strengthCost,\n            uint256 miningDuration,\n            uint256 energyCost\n        );\n\n    /// @notice Returns the address of resource contract of a specific resource type\n    /// @param resourceId The type of resource\n    /// @return The address of resource contract of a specific resource type\n    function getResourceAddress(\n        uint256 resourceId\n    ) external view returns (address);\n\n    /// @notice Returns the address of Artifacts contract\n    /// @return The address of Artifacts contract\n    function getArtifactsAddress() external view returns (address);\n\n    /// @notice Returns current strength of the tool\n    /// @param user The address of the owner of the tool\n    /// @param toolId The ID of the tool\n    /// @return Current strength of the tool\n    function getStrength(\n        address user,\n        uint256 toolId\n    ) external view returns (uint256);\n\n    /// @notice Returns the address of Mining contract\n    /// @return The address of Mining contract\n    function getMiningAddress() external view returns (address);\n\n    /// @notice Returns the amount of types of resources\n    /// @return The amount of types of resources\n    function getResourcesTypesAmount() external view returns (uint256);\n\n    /// @notice Returns the amount of types of artifacts\n    /// @return The amount of types of artifacts\n    function getArtifactsTypesAmount() external view returns (uint256);\n\n    /// @notice Returns the amount of types of tools\n    /// @return The amount of types of tools\n    function getToolsTypesAmount() external view returns (uint256);\n\n    /// @notice Checks if user owns a tool with a given ID\n    /// @param user The address of the user\n    /// @param toolId The ID of the tool\n    /// @return True if user owns a tool with a given ID. Otherwise - false\n    function ownsTool(\n        address user,\n        uint256 toolId\n    ) external view returns (bool);\n\n    /// @notice Adds a new tool.\n    /// @param maxStrength The maximum strength of the tool\n    /// @param miningDuration The duration of mining session with the tool\n    /// @param energyCost The cost in Berry tokens to start mining session with the tool\n    /// @param strengthCost The cost in tool strength to start mining session with it\n    /// @param resourcesAmount Amount of Tree tokens requires to craft a tool\n    /// @param artifactsAmounts Amounts of each type of artifacts to craft a tool\n    /// @param newURI The URI of the tool\n    /// @return The type of the new tool\n    function addTool(\n        uint32 maxStrength,\n        uint32 miningDuration,\n        uint256 energyCost,\n        uint32 strengthCost,\n        uint256 resourcesAmount,\n        uint256[] calldata artifactsAmounts,\n        string calldata newURI\n    ) external returns (uint256);\n\n    /// @notice Changes properties of the tool\n    /// @param toolType The type of the tool\n    /// @param maxStrength The maximum strength of the tool\n    /// @param miningDuration The duration of mining session with the tool\n    /// @param energyCost The cost in Berry tokens to start mining session with the tool\n    /// @param strengthCost The cost in tool strength to start mining session with it\n    function setToolProperties(\n        uint256 toolType,\n        uint32 maxStrength,\n        uint32 miningDuration,\n        uint256 energyCost,\n        uint32 strengthCost\n    ) external;\n\n    /// @notice Crafts a new tools after it was added\n    /// @param toolType The type of the tool\n    function craft(uint256 toolType) external;\n\n    /// @notice Increases a number of types of artifacts by one\n    function increaseArtifactsTypesAmount() external;\n\n    /// @notice Decreases tool's strength when mining\n    /// @param user The user who is mining\n    /// @param toolId The ID of the tool used for mining\n    /// @param strengthCost The amount of tool's strength subtracted from current strength\n    function corrupt(\n        address user,\n        uint256 toolId,\n        uint256 strengthCost\n    ) external;\n\n    /// @notice Changes address of Artifacts contract\n    /// @param artifactsAddress The new address of Artifacts contract\n    function setArtifactsAddress(address artifactsAddress) external;\n\n    /// @notice Changes address of Mining contract\n    /// @param miningAddress The new address of Mining contract\n    function setMiningAddress(address miningAddress) external;\n\n    /// @notice Pauses the contract if it's active. Activates it if it's paused\n    function pause() external;\n\n    /// @notice Mints `amount` tools of `toolType` to `to`\n    /// @param to The receiver of tools\n    /// @param toolType The type of the tool\n    /// @param amount The amount of tools to mint\n    function mint(address to, uint128 toolType, uint256 amount) external;\n\n    /// @notice Mints batches of tools of different types to `to`\n    /// @param to The receiver of tools\n    /// @param toolTypes Types of tools\n    /// @param amounts Amounts of tools\n    function mintBatch(\n        address to,\n        uint256[] calldata toolTypes,\n        uint256[] calldata amounts\n    ) external;\n\n    /// @notice Returns the recipe for the tool\n    /// @param toolType The type of the tool\n    /// @return resourcesAmount Amount of Tree resources to craft the tool\n    /// @return artifactsAmounts Amounts of artifacts of different types to craft the tool\n    function getRecipe(\n        uint256 toolType\n    )\n        external\n        view\n        returns (uint256 resourcesAmount, uint256[] memory artifactsAmounts);\n\n    /// @notice Returns the URI of the tool type\n    /// @param toolType The type of the tool\n    /// @return The URI of the tool type\n    function uri(uint256 toolType) external view returns (string memory);\n\n    /// @notice Changes the URI of the tool type\n    /// @param toolType The type of the tool\n    /// @param newURI The new URI\n    function setURI(uint256 toolType, string calldata newURI) external;\n\n    /// @notice Changes the base URI for tools\n    /// @param baseURI The new base URI\n    function setBaseURI(string calldata baseURI) external;\n\n    /// @notice Changes the recipe of the tool\n    /// @param toolType The type of the tool\n    /// @param resourcesAmount The new amount of Tree to craft the tool\n    function setRecipe(\n        uint256 toolType,\n        uint256 resourcesAmount,\n        uint256[] calldata artifactsAmounts\n    ) external;\n\n    /// @notice Completely repairs the tool\n    /// @param toolId The ID of the tool to repair\n    function repairTool(uint256 toolId) external;\n\n    /// @notice Transfers a single tool with `toolId` from `from` to `to`\n    /// @param from Sender of tokens\n    /// @param to Receiver of tokens\n    /// @param toolId The ID of the tool to transfer\n    /// @param amount Always equals to 1\n    /// @param data Extra data (optional)\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 toolId,\n        uint256 amount,\n        bytes memory data\n    ) external;\n\n    /// @notice Transfers one tool of each `toolIds` from `from` to `to`\n    /// @param from Sender of tokens\n    /// @param to Receiver of tokens\n    /// @param toolIds IDs of tools to transfer\n    /// @param amounts Each amount always equals to 1\n    /// @param data Extra data (optional)\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory toolIds,\n        uint256[] memory amounts,\n        bytes memory data\n    ) external;\n}\n"
    },
    "contracts/interfaces/UniswapInterfaces.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.12;\n\n/*\n\n    This file contains interfaces of UniswapV2 system\n*/\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(\n        address tokenA,\n        address tokenB\n    ) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(\n        address to\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(\n        uint256 amountIn,\n        address[] calldata path\n    ) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(\n        uint256 amountOut,\n        address[] calldata path\n    ) external view returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/Mining.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"./interfaces/ITools.sol\";\nimport \"./interfaces/IBlackList.sol\";\nimport \"./interfaces/IResources.sol\";\nimport \"./interfaces/IArtifacts.sol\";\nimport \"./interfaces/IMining.sol\";\n\n/// @title Contract for resources mining\ncontract Mining is\n    Initializable,\n    IMining,\n    PausableUpgradeable,\n    OwnableUpgradeable,\n    IERC1155Receiver\n{\n    using ECDSA for bytes32;\n\n    /// @dev The address of Tools contract\n    ITools private _tools;\n    /// @dev The address of Blacklist contract\n    IBlackList private _blacklist;\n    /// @dev Zero address to burn tokens\n    address private constant _zeroAddress =\n        0x000000000000000000000000000000000000dEaD;\n\n    /// @dev Mapping (user address => (toolId => MiningSession))\n    mapping(address => mapping(uint256 => MiningSession))\n        private _usersToSessions;\n    /// @dev Mapping showing the amount of resources a user would win in specific mining session\n    // (user address => (toolId => (resource id => amount)))\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256)))\n        private _usersToResources;\n    /// @dev Mapping showing the amount of artifacts a user would win in specific mining session\n    // (user address => (toolId => (artifact type => amount)))\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256)))\n        private _usersToArtifacts;\n    /// @notice Marks transaction hashes that have been executed already.\n    ///         Prevents Replay Attacks\n    mapping(bytes32 => bool) private _executed;\n\n    /// @dev Checks that user is not blacklisted\n    modifier ifNotBlacklisted(address user) {\n        require(!_blacklist.check(user), \"User in blacklist\");\n        _;\n    }\n\n    function initialize(\n        address blacklistAddress,\n        address toolsAddress\n    ) external initializer {\n        _tools = ITools(toolsAddress);\n        _blacklist = IBlackList(blacklistAddress);\n\n        __Pausable_init();\n        __Ownable_init();\n    }\n\n    /// @dev The following 3 functions are required to ERC1155 standard\n    function supportsInterface(\n        bytes4 interfaceId\n    ) external pure returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return\n            bytes4(\n                keccak256(\n                    \"onERC1155Received(address,address,uint256,uint256,bytes)\"\n                )\n            );\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return\n            bytes4(\n                keccak256(\n                    \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"\n                )\n            );\n    }\n\n    /// @notice See {IMining-pause}\n    function pause() external onlyOwner {\n        if (!paused()) {\n            _pause();\n        } else {\n            _unpause();\n        }\n    }\n\n    /// @notice See {IMining-startMining}\n    function startMining(\n        uint256 toolId,\n        address user,\n        bytes calldata rewards,\n        bytes calldata signature,\n        uint256 nonce\n    ) external whenNotPaused ifNotBlacklisted(user) {\n        (\n            uint256[] memory resourcesAmount,\n            uint256[] memory artifactsAmounts\n        ) = abi.decode(rewards, (uint256[], uint256[]));\n\n        // Avoid \"stack too deep\"\n        Args memory args = Args({\n            toolId: toolId,\n            user: user,\n            nonce: nonce,\n            signature: signature,\n            resources: resourcesAmount,\n            artifacts: artifactsAmounts\n        });\n\n        require(\n            !_usersToSessions[args.user][args.toolId].started,\n            \"Mining: this user already started mining process\"\n        );\n\n        bytes32 txHash = _getTxHashMining(\n            args.toolId,\n            args.user,\n            args.resources,\n            args.artifacts,\n            args.nonce\n        );\n\n        // Prevent signature replay attacks\n        require(!_executed[txHash], \"Mining: already executed\");\n\n        // Make sure the backend has signed the tx\n        require(\n            _verifyBackendSignature(args.signature, txHash),\n            \"Mining: invalid backend signature\"\n        );\n\n        _executed[txHash] = true;\n\n        (\n            uint256 toolType,\n            uint256 strength,\n            uint256 strengthCost,\n            uint256 miningDuration,\n            uint256 energyCost\n        ) = _tools.getToolProperties(args.user, args.toolId);\n\n        require(strength - strengthCost > 0, \"Mining: not enough strength\");\n\n        // Burn user's Berry tokens.\n        IResources resource = IResources(_tools.getResourceAddress(0));\n        resource.transferFrom(args.user, _zeroAddress, energyCost);\n\n        // Transfer user's tool to this contract\n        _tools.safeTransferFrom(args.user, address(this), args.toolId, 1, \"\");\n\n        // Create a new session\n        _usersToSessions[args.user][args.toolId] = MiningSession({\n            toolId: uint32(args.toolId),\n            started: true,\n            ended: false,\n            endTime: uint32(block.timestamp + miningDuration),\n            energyCost: uint32(energyCost),\n            strengthCost: uint16(strengthCost),\n            nonce: uint32(args.nonce)\n        });\n\n        // After session has been started, the rewards are assigned to the user\n        _setRewards(args.user, args.toolId, args.resources, args.artifacts);\n\n        emit MiningStarted(args.user, _usersToSessions[args.user][args.toolId]);\n    }\n\n    /// @notice See {IMining-endMining}\n    function endMining(\n        uint256 toolId\n    ) external whenNotPaused ifNotBlacklisted(_msgSender()) {\n        require(\n            _usersToSessions[_msgSender()][toolId].started,\n            \"Mining: user doesn't mine\"\n        );\n        require(\n            block.timestamp >= _usersToSessions[_msgSender()][toolId].endTime,\n            \"Mining: too early\"\n        );\n\n        // Decrease tool's strength and give it back to the user\n        _tools.corrupt(\n            address(this),\n            toolId,\n            _usersToSessions[_msgSender()][toolId].strengthCost\n        );\n        _tools.safeTransferFrom(address(this), _msgSender(), toolId, 1, \"\");\n\n        // Stop the session\n        _usersToSessions[_msgSender()][toolId].ended = true;\n        emit MiningEnded(_msgSender(), _usersToSessions[_msgSender()][toolId]);\n\n        IResources resource;\n        IArtifacts artifacts;\n\n        uint256[] memory claimedResources = new uint256[](\n            _tools.getResourcesTypesAmount()\n        );\n        uint256[] memory claimedArtifacts = new uint256[](\n            _tools.getArtifactsTypesAmount()\n        );\n\n        // Claim all types of resources from this session\n        for (\n            uint256 toolType = 0;\n            toolType < _tools.getResourcesTypesAmount();\n            toolType++\n        ) {\n            if (_usersToResources[_msgSender()][toolId][toolType] != 0) {\n                resource = IResources(_tools.getResourceAddress(toolType));\n                resource.transfer(\n                    _msgSender(),\n                    _usersToResources[_msgSender()][toolId][toolType]\n                );\n                delete _usersToResources[_msgSender()][toolId][toolType];\n            }\n            // Mark that user has claimed some amount of resources. Even if it's zero.\n            claimedResources[toolType] = _usersToResources[_msgSender()][\n                toolId\n            ][toolType];\n        }\n\n        // Claim all types of artifacts from this session\n        for (\n            uint256 artifactType = 0;\n            artifactType < _tools.getArtifactsTypesAmount();\n            artifactType++\n        ) {\n            if (_usersToArtifacts[_msgSender()][toolId][artifactType] != 0) {\n                artifacts = IArtifacts(_tools.getArtifactsAddress());\n                for (\n                    uint256 i = 0;\n                    i < _usersToArtifacts[_msgSender()][toolId][artifactType];\n                    i++\n                ) {\n                    // Mint new artifact a required number of times\n                    artifacts.lootArtifact(_msgSender(), artifactType);\n                    // When looting, 1 artifact is minted\n                    claimedArtifacts[artifactType] = 1;\n                }\n                delete _usersToArtifacts[_msgSender()][toolId][artifactType];\n            } else {\n                // No artifacts were looted\n                claimedArtifacts[artifactType] = 0;\n            }\n        }\n\n        emit RewardsClaimed(_msgSender(), claimedResources, claimedArtifacts);\n\n        // Delete the session\n        delete _usersToSessions[_msgSender()][toolId];\n    }\n\n    /// @dev Verifies that message was signed by the backend\n    /// @param signature A signature used to sign the tx\n    /// @param txHash An unsigned hashed data\n    /// @return True if tx was signed by the backend (owner). Otherwise false.\n    function _verifyBackendSignature(\n        bytes memory signature,\n        bytes32 txHash\n    ) private view returns (bool) {\n        // Remove the \"\\x19Ethereum Signed Message:\\n\" prefix from the signature\n        bytes32 clearHash = txHash.toEthSignedMessageHash();\n        // Recover the address of the user who signed the tx\n        address recoveredUser = clearHash.recover(signature);\n        return recoveredUser == owner();\n    }\n\n    /// @dev Calculates the hash of parameters of mining function and a nonce\n    /// @param toolId The ID of the tool used for mining\n    /// @param user The user who started mining\n    /// @param resourcesAmount The amount of resources to be mined\n    /// @param artifactsAmounts The amount of artifacts to be mined\n    /// @param nonce The unique integer\n    function _getTxHashMining(\n        uint256 toolId,\n        address user,\n        uint256[] memory resourcesAmount,\n        uint256[] memory artifactsAmounts,\n        uint256 nonce\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    address(this),\n                    toolId,\n                    user,\n                    resourcesAmount,\n                    artifactsAmounts,\n                    nonce\n                )\n            );\n    }\n\n    /// @dev Sets rewards for a user in a specific mining session\n    /// @param user The user to assign rewards to\n    /// @param toolId The ID of the tool used in the session\n    ///        a unique tool is used in each session\n    /// @param resourcesAmount Array of amounts of each type of resource that\n    ///        can be claimed after mining\n    /// @param artifactsAmounts Array of amounts of each type of artifact that\n    ///        can be claimed after mining\n    function _setRewards(\n        address user,\n        uint256 toolId,\n        uint256[] memory resourcesAmount,\n        uint256[] memory artifactsAmounts\n    ) private {\n        for (uint256 counter = 0; counter < resourcesAmount.length; counter++) {\n            if (resourcesAmount[counter] != 0) {\n                _usersToResources[user][toolId][counter] += resourcesAmount[\n                    counter\n                ];\n            }\n        }\n        for (\n            uint256 counter = 0;\n            counter < artifactsAmounts.length;\n            counter++\n        ) {\n            if (artifactsAmounts[counter] != 0) {\n                _usersToArtifacts[user][toolId][\n                    counter + 1\n                ] += artifactsAmounts[counter];\n            }\n        }\n    }\n}\n"
    },
    "contracts/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/// @title Mock ERC20 contract to be used in tests\ncontract Resource is ERC20 {\n    constructor() ERC20(\"Test\", \"Test\") {}\n\n    function mint(address to, uint256 amount) external {\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/Resources.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./interfaces/UniswapInterfaces.sol\";\nimport \"./interfaces/IGem.sol\";\nimport \"./interfaces/IResources.sol\";\n\n/// @title This contract represents 3 types of resources used to start mining,\n///        buy and craft tools\n/// @dev This token implements the reflection mechanism (RFI).\n///      For more details see: https://reflect-contract-doc.netlify.app/\ncontract PocMon is Ownable, IResources {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping(address => uint256) private _rOwned;\n    mapping(address => uint256) private _tOwned;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    mapping(address => bool) private _isExcludedFromFee;\n\n    mapping(address => bool) private _isExcludedFromRewards;\n    address[] private _excluded;\n\n    address public _gemWalletAddress;\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private _tTotal;\n    uint256 private _rTotal;\n    uint256 private _tFeeTotal;\n    string private _name;\n    string private _symbol;\n    uint256 private _decimals;\n    uint256 public _reflectionFee = 1;\n    uint256 private _previousReflectionFee;\n    uint256 public _gemFee = 6;\n    uint256 private _previousGemFee;\n    uint256 public _liquidityFee = 3;\n    uint256 private _previousLiquidityFee;\n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapV2Pair;\n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n    uint256 public _maxTxAmount;\n    uint256 public numTokensSellToAddToLiquidity;\n\n    IGem public compensationToken;\n\n    modifier lockTheSwap() {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor(\n        string memory name_,\n        address router,\n        address compensationToken_,\n        address devAddress,\n        address owner_\n    ) Ownable() {\n        _name = name_;\n        _symbol = \"MON\";\n        _decimals = 9;\n        _tTotal = 300_000_000 * 10 ** 9;\n        _rTotal = (MAX - (MAX % _tTotal));\n        _maxTxAmount = 10 * 10 ** 6 * 10 ** 9;\n        numTokensSellToAddToLiquidity = 1_500_000 * 10 ** 9;\n        _gemWalletAddress = devAddress;\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n\n        compensationToken = IGem(compensationToken_);\n\n        //exclude owner and this contract from fee\n        _isExcludedFromFee[owner_] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_gemWalletAddress] = true;\n\n        transferOwnership(owner_);\n        _rOwned[owner()] = _rTotal;\n\n        emit Transfer(address(0), owner(), _tTotal);\n    }\n\n    receive() external payable {}\n\n    function isExcludedFromReward(\n        address account\n    ) external view returns (bool) {\n        return _isExcludedFromRewards[account];\n    }\n\n    function isExcludedFromFee(address account) external view returns (bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function reflectionFee() external view returns (uint256) {\n        return _reflectionFee;\n    }\n\n    function gemFee() external view returns (uint256) {\n        return _gemFee;\n    }\n\n    function liquidityFee() external view returns (uint256) {\n        return _liquidityFee;\n    }\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function gemWallet() external view returns (address) {\n        return _gemWalletAddress;\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) external override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"PocMon: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) external returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    function setRouterAddress(address newRouter) external onlyOwner {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouter);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n        uniswapV2Router = _uniswapV2Router;\n    }\n\n    function setNumTokensSellToAddToLiquidity(\n        uint256 amountToUpdate\n    ) external onlyOwner {\n        numTokensSellToAddToLiquidity = amountToUpdate;\n    }\n\n    function setGemWallet(address payable gemWalletAddress) external onlyOwner {\n        _gemWalletAddress = gemWalletAddress;\n    }\n\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) external returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"PocMon: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    function excludeFromReward(address account) external onlyOwner {\n        require(\n            !_isExcludedFromRewards[account],\n            \"PocMon: account is already excluded\"\n        );\n        if (_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcludedFromRewards[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeInReward(address account) external onlyOwner {\n        require(\n            _isExcludedFromRewards[account],\n            \"PocMon: account is already included\"\n        );\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcludedFromRewards[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function excludeFromFee(address account) external onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) external onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    function setReflectionFeePercent(\n        uint256 reflectionFee_\n    ) external onlyOwner {\n        require(\n            reflectionFee_ + _liquidityFee + _gemFee < 15,\n            \"PocMon: you have reached fee limit\"\n        );\n        _reflectionFee = reflectionFee_;\n    }\n\n    function setGemFeePercent(uint256 gemFee_) external onlyOwner {\n        require(\n            _reflectionFee + _liquidityFee + gemFee_ < 15,\n            \"PocMon: you have reached fee limit\"\n        );\n        _gemFee = gemFee_;\n    }\n\n    function setLiquidityFeePercent(uint256 liquidityFee_) external onlyOwner {\n        require(\n            _reflectionFee + liquidityFee_ + _gemFee < 15,\n            \"PocMon: you have reached fee limit\"\n        );\n        _liquidityFee = liquidityFee_;\n    }\n\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner {\n        require(\n            maxTxAmount >= 1_500_000 * 10 ** 9,\n            \"PocMon: maxTxAmount should be greater than 1500000e9\"\n        );\n        _maxTxAmount = maxTxAmount;\n    }\n\n    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n\n    function reflectionFromToken(\n        uint256 tAmount,\n        bool deductTransferFee\n    ) public view returns (uint256) {\n        require(tAmount <= _tTotal, \"PocMon: amount must be less than supply\");\n        if (!deductTransferFee) {\n            (uint256 rAmount, , , , , ) = _getValues(tAmount);\n            return rAmount;\n        } else {\n            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\n            return rTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(\n        uint256 rAmount\n    ) public view returns (uint256) {\n        require(\n            rAmount <= _rTotal,\n            \"PocMon: amount must be less than total reflections\"\n        );\n        uint256 currentRate = _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint256) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcludedFromRewards[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function _getBnbEquivalent(uint256 amount) internal view returns (uint256) {\n        if (!uniswapV2Pair.isContract()) {\n            return 0;\n        }\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\n        uint256 reserve0;\n        uint256 reserve1;\n        try pair.getReserves() returns (\n            uint112 reserve0_,\n            uint112 reserve1_,\n            uint32\n        ) {\n            reserve0 = reserve0_;\n            reserve1 = reserve1_;\n        } catch {\n            return 0;\n        }\n\n        if (reserve0 == 0) {\n            return 0;\n        }\n        return (amount * reserve1) / reserve0;\n    }\n\n    function _getRValues(\n        uint256 tAmount,\n        uint256 tReflectionFee,\n        uint256 tGemFee,\n        uint256 tLiquidity,\n        uint256 currentRate\n    ) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rReflectionFee = tReflectionFee.mul(currentRate);\n        uint256 rGemFee = tGemFee.mul(currentRate);\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rReflectionFee).sub(rGemFee).sub(\n            rLiquidity\n        );\n        return (rAmount, rTransferAmount, rReflectionFee);\n    }\n\n    function _getValues(\n        uint256 tAmount\n    )\n        private\n        view\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\n    {\n        (\n            uint256 tTransferAmount,\n            uint256 tReflectionFee,\n            uint256 tGemFee,\n            uint256 tLiquidity\n        ) = _getTValues(tAmount);\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rReflectionFee\n        ) = _getRValues(\n                tAmount,\n                tReflectionFee,\n                tGemFee,\n                tLiquidity,\n                _getRate()\n            );\n        return (\n            rAmount,\n            rTransferAmount,\n            rReflectionFee,\n            tTransferAmount,\n            tReflectionFee,\n            tLiquidity + tGemFee\n        );\n    }\n\n    function _getTValues(\n        uint256 tAmount\n    ) private view returns (uint256, uint256, uint256, uint256) {\n        uint256 tReflectionFee = calculateReflectionFee(tAmount);\n        uint256 tGemFee = calculateGemFee(tAmount);\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\n        uint256 tTransferAmount = tAmount.sub(tReflectionFee).sub(tGemFee).sub(\n            tLiquidity\n        );\n        return (tTransferAmount, tReflectionFee, tGemFee, tLiquidity);\n    }\n\n    function _getRate() private view returns (uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns (uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (\n                _rOwned[_excluded[i]] > rSupply ||\n                _tOwned[_excluded[i]] > tSupply\n            ) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function calculateReflectionFee(\n        uint256 _amount\n    ) private view returns (uint256) {\n        return _amount.mul(_reflectionFee).div(10 ** 2);\n    }\n\n    function calculateGemFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_gemFee).div(10 ** 2);\n    }\n\n    function calculateLiquidityFee(\n        uint256 _amount\n    ) private view returns (uint256) {\n        return _amount.mul(_liquidityFee).div(10 ** 2);\n    }\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    function _takeLiquidity(uint256 tLiquidity) private {\n        uint256 currentRate = _getRate();\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\n        if (_isExcludedFromRewards[address(this)])\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\n    }\n\n    function removeAllFee() private {\n        _previousReflectionFee = _reflectionFee;\n        _previousGemFee = _gemFee;\n        _previousLiquidityFee = _liquidityFee;\n\n        _reflectionFee = 0;\n        _gemFee = 0;\n        _liquidityFee = 0;\n    }\n\n    function restoreAllFee() private {\n        _reflectionFee = _previousReflectionFee;\n        _gemFee = _previousGemFee;\n        _liquidityFee = _previousLiquidityFee;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"PocMon: approve from the zero address\");\n        require(spender != address(0), \"PocMon: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"PocMon: transfer from the zero address\");\n        require(to != address(0), \"PocMon: transfer to the zero address\");\n        require(\n            amount > 0,\n            \"PocMon: transfer amount must be greater than zero\"\n        );\n        require(\n            amount <= balanceOf(from),\n            \"PocMon: transfer amount exceeds balance\"\n        );\n        if (from != owner() && to != owner()) {\n            require(\n                amount <= _maxTxAmount,\n                \"PocMon: transfer amount exceeds the maxTxAmount.\"\n            );\n        }\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n        if (contractTokenBalance >= _maxTxAmount) {\n            contractTokenBalance = _maxTxAmount;\n        }\n\n        bool overMinTokenBalance = contractTokenBalance >=\n            numTokensSellToAddToLiquidity;\n        if (\n            overMinTokenBalance &&\n            !inSwapAndLiquify &&\n            from != uniswapV2Pair &&\n            swapAndLiquifyEnabled\n        ) {\n            contractTokenBalance = numTokensSellToAddToLiquidity;\n            swapAndLiquify(contractTokenBalance);\n        }\n\n        bool takeFee = true;\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n            takeFee = false;\n        }\n\n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\n    function swapTokensForBnb(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        try\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                tokenAmount,\n                0, // accept any amount of BNB\n                path,\n                address(this),\n                block.timestamp\n            )\n        {} catch {}\n    }\n\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n        uint256 toGemWallet = contractTokenBalance.mul(_gemFee).div(\n            _gemFee.add(_liquidityFee)\n        );\n        uint256 toLiquidity = contractTokenBalance.sub(toGemWallet);\n\n        uint256 half = toLiquidity.div(2);\n        uint256 otherHalf = toLiquidity.sub(half);\n\n        uint256 swapToBNB = half.add(toGemWallet);\n        uint256 initialBalance = address(this).balance;\n        swapTokensForBnb(swapToBNB);\n        uint256 newBalance = address(this).balance.sub(initialBalance);\n\n        uint256 gemFeeAmount = newBalance.mul(toGemWallet).div(\n            toGemWallet + half\n        );\n        uint256 bnbForLiquidity = newBalance.sub(gemFeeAmount);\n        if (gemFeeAmount > 0) {\n            payable(_gemWalletAddress).transfer(gemFeeAmount);\n            emit GemFeeSent(_gemWalletAddress, gemFeeAmount);\n        }\n        addLiquidity(otherHalf, bnbForLiquidity);\n        emit SwapAndLiquify(half, bnbForLiquidity, otherHalf);\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        try\n            uniswapV2Router.addLiquidityETH{value: ethAmount}(\n                address(this),\n                tokenAmount,\n                0, // slippage is unavoidable\n                0, // slippage is unavoidable\n                address(this), // LP tokens are locked\n                block.timestamp\n            )\n        {} catch {}\n    }\n\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bool takeFee\n    ) private {\n        if (!takeFee) removeAllFee();\n\n        if (\n            _isExcludedFromRewards[sender] && !_isExcludedFromRewards[recipient]\n        ) {\n            _transferFromExcluded(sender, recipient, amount);\n        } else if (\n            !_isExcludedFromRewards[sender] && _isExcludedFromRewards[recipient]\n        ) {\n            _transferToExcluded(sender, recipient, amount);\n        } else if (\n            _isExcludedFromRewards[sender] && _isExcludedFromRewards[recipient]\n        ) {\n            _transferBothExcluded(sender, recipient, amount);\n        } else {\n            _transferStandard(sender, recipient, amount);\n        }\n\n        if (!takeFee) restoreAllFee();\n    }\n\n    function _compensateFee(\n        address sender,\n        address recipient,\n        uint256 totalFee\n    ) private {\n        if (totalFee > 0 && sender == uniswapV2Pair) {\n            uint256 bnbEquivalent = _getBnbEquivalent(totalFee);\n            compensationToken.compensateBnb(recipient, bnbEquivalent);\n        }\n    }\n\n    function _transferStandard(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount,\n            uint256 tFee,\n            uint256 tLiquidity\n        ) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        _compensateFee(sender, recipient, tFee + tLiquidity);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferToExcluded(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount,\n            uint256 tFee,\n            uint256 tLiquidity\n        ) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        _compensateFee(sender, recipient, tFee + tLiquidity);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferFromExcluded(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount,\n            uint256 tFee,\n            uint256 tLiquidity\n        ) = _getValues(tAmount);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        _compensateFee(sender, recipient, tFee + tLiquidity);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferBothExcluded(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount,\n            uint256 tFee,\n            uint256 tLiquidity\n        ) = _getValues(tAmount);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        _compensateFee(sender, recipient, tFee + tLiquidity);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n}\n"
    },
    "contracts/Tools.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./interfaces/IResources.sol\";\nimport \"./interfaces/IBlackList.sol\";\nimport \"./interfaces/IArtifacts.sol\";\nimport \"./interfaces/ITools.sol\";\n\n/// @title This contracts represents tools that are used to mine resources and artifacts.\ncontract Tools is\n    Initializable,\n    OwnableUpgradeable,\n    ERC1155Upgradeable,\n    PausableUpgradeable,\n    IERC1155Receiver,\n    ITools\n{\n    using Strings for uint256;\n\n    /// @dev The address of the Blacklist contract\n    IBlackList private _blacklist;\n    /// @dev The address of the Artifacts contract\n    IArtifacts private _artifacts;\n    /// @dev The address of the Mining contract\n    address private _miningAddress;\n\n    /// @dev Base URI for IPFS\n    string private _baseURI;\n\n    /// @dev Zero address to burn tokens\n    address private constant _zeroAddress =\n        0x000000000000000000000000000000000000dEaD;\n\n    /// @dev IDs of tools. Each one is unique\n    uint256 private _toolIds;\n    /// @dev Types of tools\n    uint256 private _toolTypes;\n    /// @dev Number of types of artifacts\n    /// @dev Starts with 0\n    uint256 private _artifactTypesAmount;\n    /// @dev Number of types of resources\n    /// @dev Starts with 0\n    uint256 private _resourceTypesAmount;\n\n    /// @dev Mapping (enum Resources => IResources)\n    mapping(Resources => IResources) private _resources;\n    /// @dev Mapping (tool type => repair cost)\n    mapping(uint256 => uint256) private _repairCost;\n    /// @dev Mapping (tool id => URI)\n    mapping(uint256 => string) private _idsToURIs;\n    /// @dev Mapping (tool type => Tool)\n    mapping(uint256 => Tool) private _typesToTools;\n    /// @dev Mapping (tool type => Recipe)\n    mapping(uint256 => Recipe) private _typesToRecipes;\n    /// @dev Mapping (user address => (tool id => OwnedTool))\n    mapping(address => mapping(uint256 => OwnedTool)) private _ownedTools;\n\n    /// @dev Checks that user is not blacklisted\n    modifier ifNotBlacklisted(address user) {\n        require(!_blacklist.check(user), \"Tools: user in blacklist\");\n        _;\n    }\n\n    function initialize(\n        address blacklistAddress,\n        address berryAddress,\n        address treeAddress,\n        address goldAddress,\n        string memory baseURI\n    ) external initializer {\n        _blacklist = IBlackList(blacklistAddress);\n\n        // Initially, there are only 3 types of resources\n        _resources[Resources.Berry] = IResources(berryAddress);\n        _resources[Resources.Tree] = IResources(treeAddress);\n        _resources[Resources.Gold] = IResources(goldAddress);\n        _resourceTypesAmount = 3;\n\n        _baseURI = baseURI;\n\n        __ERC1155_init(\"\");\n        __Pausable_init();\n        __Ownable_init();\n    }\n\n    /// @dev The next 2 functions are required for ERC1155 standard\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return\n            bytes4(\n                keccak256(\n                    \"onERC1155Received(address,address,uint256,uint256,bytes)\"\n                )\n            );\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return\n            bytes4(\n                keccak256(\n                    \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"\n                )\n            );\n    }\n\n    /// @notice See {ITools-getToolProperties}\n    function getToolProperties(\n        address user,\n        uint256 toolId\n    )\n        external\n        view\n        returns (\n            uint256 toolType,\n            uint256 strength,\n            uint256 strengthCost,\n            uint256 miningDuration,\n            uint256 energyCost\n        )\n    {\n        toolType = _ownedTools[user][toolId].toolType;\n\n        strength = _ownedTools[user][toolId].strength;\n\n        strengthCost = _typesToTools[toolType].strengthCost;\n        miningDuration = _typesToTools[toolType].miningDuration;\n        energyCost = _typesToTools[toolType].energyCost;\n\n        return (toolType, strength, strengthCost, miningDuration, energyCost);\n    }\n\n    /// @notice See {ITools-getToolTypeProperties}\n    function getToolTypeProperties(\n        uint256 toolType\n    )\n        external\n        view\n        returns (\n            uint256 maxStrength,\n            uint256 strengthCost,\n            uint256 miningDuration,\n            uint256 energyCost\n        )\n    {\n        maxStrength = _typesToTools[toolType].maxStrength;\n        strengthCost = _typesToTools[toolType].strengthCost;\n        miningDuration = _typesToTools[toolType].miningDuration;\n        energyCost = _typesToTools[toolType].energyCost;\n\n        return (maxStrength, strengthCost, miningDuration, energyCost);\n    }\n\n    /// @notice See {ITools-getResourceAddress}\n    function getResourceAddress(\n        uint256 resourceId\n    ) external view returns (address) {\n        return address(_resources[Resources(resourceId)]);\n    }\n\n    /// @notice See {ITools-getArtifactsAddress}\n    function getArtifactsAddress() external view returns (address) {\n        return address(_artifacts);\n    }\n\n    /// @notice See {ITools-getMiningAddress}\n    function getMiningAddress() external view returns (address) {\n        return _miningAddress;\n    }\n\n    /// @notice See {ITools-getStrength}\n    function getStrength(\n        address user,\n        uint256 toolId\n    ) external view returns (uint256) {\n        return _ownedTools[user][toolId].strength;\n    }\n\n    /// @notice See {ITools-getResourcesTypesAmount}\n    function getResourcesTypesAmount() external view returns (uint256) {\n        return _resourceTypesAmount;\n    }\n\n    /// @notice See {ITools-getArtifactsTypesAmount}\n    function getArtifactsTypesAmount() external view returns (uint256) {\n        return _artifactTypesAmount;\n    }\n\n    /// @notice See {ITools-getToolsTypesAmount}\n    function getToolsTypesAmount() external view returns (uint256) {\n        return _toolTypes;\n    }\n\n    /// @notice See {ITools-ownsTool}\n    function ownsTool(\n        address user,\n        uint256 toolId\n    ) external view returns (bool) {\n        // Initial tool type is 1. If it's a 0 - the tool does not exist.\n        return _ownedTools[user][toolId].toolType != 0;\n    }\n\n    /// @notice See {ITools-addTool}\n    function addTool(\n        uint32 maxStrength,\n        uint32 miningDuration,\n        uint256 energyCost,\n        uint32 strengthCost,\n        uint256 resourcesAmount,\n        uint256[] calldata artifactsAmounts,\n        string calldata newURI\n    ) external onlyOwner returns (uint256) {\n        require(\n            maxStrength % 5 == 0 && maxStrength > 0,\n            \"Tools: invalid strength value\"\n        );\n        require(\n            miningDuration > 0,\n            \"Tools: mining duration must be greather than zero\"\n        );\n\n        // First tool type is 1\n        _toolTypes++;\n        uint256 newType = _toolTypes;\n        _typesToTools[newType].maxStrength = maxStrength;\n        _typesToTools[newType].miningDuration = miningDuration;\n        _typesToTools[newType].energyCost = energyCost;\n        _typesToTools[newType].strengthCost = strengthCost;\n\n        emit AddTool(newType, newURI);\n        setURI(newType, newURI);\n        setRecipe(newType, resourcesAmount, artifactsAmounts);\n        return newType;\n    }\n\n    /// @notice See {ITools-setToolProperties}\n    function setToolProperties(\n        uint256 toolType,\n        uint32 maxStrength,\n        uint32 miningDuration,\n        uint256 energyCost,\n        uint32 strengthCost\n    ) external onlyOwner {\n        require(toolType <= _toolTypes, \"Tools: invalid toolTypes value\");\n        require(maxStrength % 5 == 0, \"Tools: invalid strength value\");\n        require(\n            miningDuration > 0,\n            \"Tools: mining duration must be greather than zero\"\n        );\n\n        _typesToTools[toolType].maxStrength = maxStrength;\n        _typesToTools[toolType].miningDuration = miningDuration;\n        _typesToTools[toolType].energyCost = energyCost;\n        _typesToTools[toolType].strengthCost = strengthCost;\n\n        emit ToolPropertiesSet(toolType);\n    }\n\n    /// @notice See {ITools-craft}\n    function craft(\n        uint256 toolType\n    ) external whenNotPaused ifNotBlacklisted(_msgSender()) {\n        uint256 resourcesAmount;\n        uint256[] memory artifactsAmounts;\n\n        (resourcesAmount, artifactsAmounts) = getRecipe(toolType);\n\n        _resources[Resources.Gold].transferFrom(\n            _msgSender(),\n            _zeroAddress,\n            resourcesAmount\n        );\n\n        _resources[Resources.Tree].transferFrom(\n            _msgSender(),\n            _zeroAddress,\n            resourcesAmount * 5\n        );\n\n        for (\n            uint256 counter = 0;\n            counter < artifactsAmounts.length;\n            counter++\n        ) {\n            if (artifactsAmounts[counter] != 0) {\n                _artifacts.safeTransferFrom(\n                    _msgSender(),\n                    _zeroAddress,\n                    counter + 1,\n                    artifactsAmounts[counter],\n                    \"\"\n                );\n            }\n        }\n\n        _mint(_msgSender(), toolType, 1, \"\");\n\n        _toolIds++;\n        _ownedTools[_msgSender()][_toolIds] = OwnedTool({\n            toolType: uint128(toolType),\n            strength: _typesToTools[toolType].maxStrength\n        });\n\n        emit Craft(_msgSender(), toolType, _toolIds);\n    }\n\n    /// @notice See {ITools-increaseArtifactsTypesAmount}\n    function increaseArtifactsTypesAmount() external {\n        require(\n            msg.sender == address(_artifacts),\n            \"Tools: caller is not an Artifacts contract\"\n        );\n        _artifactTypesAmount++;\n    }\n\n    /// @notice See {ITools-corrupt}\n    function corrupt(\n        address user,\n        uint256 toolId,\n        uint256 strengthCost\n    ) external whenNotPaused {\n        require(\n            _msgSender() == _miningAddress,\n            \"Tools: msg.sender isn't Mining contract\"\n        );\n        _ownedTools[user][toolId].strength -= uint128(strengthCost);\n    }\n\n    /// @notice See {ITools-setArtifactsAddress}\n    function setArtifactsAddress(address artifactsAddress) external onlyOwner {\n        _artifacts = IArtifacts(artifactsAddress);\n    }\n\n    /// @notice See {ITools-setMiningAddress}\n    function setMiningAddress(address miningAddress) external onlyOwner {\n        _miningAddress = miningAddress;\n    }\n\n    /// @notice See {ITools-pause}\n    function pause() external onlyOwner {\n        if (!paused()) {\n            _pause();\n        } else {\n            _unpause();\n        }\n    }\n\n    /// @notice See {ITools-mint}\n    function mint(\n        address to,\n        uint128 toolType,\n        uint256 amount\n    ) external onlyOwner ifNotBlacklisted(to) {\n        require(_toolTypes != 0, \"Tools: no tools\");\n        require(toolType <= _toolTypes, \"Tools: invalid toolTypes value\");\n\n        _mint(to, toolType, amount, \"\");\n        emit MintType(to, toolType, amount);\n        for (uint256 counter = 0; counter < amount; counter++) {\n            _toolIds++;\n            _ownedTools[to][_toolIds] = OwnedTool({\n                toolType: toolType,\n                strength: _typesToTools[toolType].maxStrength\n            });\n            emit MintId(to, toolType, _toolIds);\n        }\n    }\n\n    /// @notice See {ITools-mintBatch}\n    function mintBatch(\n        address to,\n        uint256[] calldata toolTypes,\n        uint256[] calldata amounts\n    ) external onlyOwner ifNotBlacklisted(to) {\n        require(_toolTypes != 0, \"Tools: no tools\");\n        for (uint256 counter = 0; counter < toolTypes.length; counter++) {\n            require(\n                toolTypes[counter] <= _toolTypes,\n                \"Tools: invalid toolTypes value\"\n            );\n        }\n\n        _mintBatch(to, toolTypes, amounts, \"\");\n        for (uint256 counter = 0; counter < toolTypes.length; counter++) {\n            emit MintType(to, toolTypes[counter], amounts[counter]);\n            for (uint256 i = 0; i < amounts.length; i++) {\n                _toolIds++;\n                _ownedTools[to][_toolIds].toolType = uint128(\n                    toolTypes[counter]\n                );\n                _ownedTools[to][_toolIds].strength = _typesToTools[\n                    toolTypes[counter]\n                ].maxStrength;\n                emit MintId(to, toolTypes[counter], _toolIds);\n            }\n        }\n    }\n\n    /// @dev This function is required for ERC1155 standard\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        override(ERC1155Upgradeable, IERC165Upgradeable, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC165Upgradeable).interfaceId ||\n            interfaceId == type(IERC165).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @notice See {ITools-getRecipe}\n    function getRecipe(\n        uint256 toolType\n    )\n        public\n        view\n        whenNotPaused\n        returns (uint256 resourcesAmount, uint256[] memory artifactsAmounts)\n    {\n        artifactsAmounts = new uint256[](_artifactTypesAmount);\n\n        resourcesAmount = _typesToRecipes[toolType].resourcesAmount;\n\n        for (uint256 counter = 0; counter < _artifactTypesAmount; counter++) {\n            if (_typesToRecipes[toolType].artifacts[counter] > 0) {\n                artifactsAmounts[counter] = _typesToRecipes[toolType].artifacts[\n                    counter\n                ];\n            }\n        }\n    }\n\n    /// @notice See {ITools-uri}\n    function uri(\n        uint256 toolType\n    ) public view override(ERC1155Upgradeable, ITools) returns (string memory) {\n        string memory tokenURI = _idsToURIs[toolType];\n        return\n            bytes(tokenURI).length > 0\n                ? string(abi.encodePacked(_baseURI, tokenURI))\n                : super.uri(toolType);\n    }\n\n    /// @notice See {ITools-setURI}\n    function setURI(uint256 toolType, string calldata newURI) public onlyOwner {\n        _setURI(toolType, newURI);\n    }\n\n    /// @notice See {ITools-setBaseURI}\n    function setBaseURI(string calldata baseURI) public onlyOwner {\n        _setBaseURI(baseURI);\n    }\n\n    /// @notice See {ITools-setRecipe}\n    function setRecipe(\n        uint256 toolType,\n        uint256 resourcesAmount,\n        uint256[] calldata artifactsAmounts\n    ) public onlyOwner {\n        require(toolType <= _toolTypes, \"Tools: invalid toolTypes value\");\n        require(\n            artifactsAmounts.length == _artifactTypesAmount,\n            \"Tools: invalid array size\"\n        );\n\n        _typesToRecipes[toolType].resourcesAmount = resourcesAmount;\n\n        for (uint256 counter = 0; counter < _artifactTypesAmount; counter++) {\n            _typesToRecipes[toolType].artifacts[counter] = artifactsAmounts[\n                counter\n            ];\n        }\n\n        emit RecipeCreatedOrUpdated(\n            toolType,\n            resourcesAmount,\n            artifactsAmounts\n        );\n    }\n\n    /// @notice See {ITools-repairTool}\n    function repairTool(\n        uint256 toolId\n    ) public whenNotPaused ifNotBlacklisted(_msgSender()) {\n        OwnedTool memory tool = _ownedTools[_msgSender()][toolId];\n        uint256 toolTypeId = tool.toolType;\n        require(toolTypeId > 0, \"Tools: tool does not exist\");\n\n        uint128 maxStrength = _typesToTools[tool.toolType].maxStrength;\n        uint256 auraAmount = (maxStrength - tool.strength) / 5;\n\n        require(auraAmount != 0, \"Tools: the tool is already strong enough\");\n\n        _resources[Resources.Gold].transferFrom(\n            _msgSender(),\n            _zeroAddress,\n            auraAmount\n        );\n\n        _ownedTools[_msgSender()][toolId].strength = maxStrength;\n        emit ToolRepaired(toolId);\n    }\n\n    /// @notice See {ITools-safeTransferFrom}\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 toolId,\n        uint256 amount,\n        bytes memory data\n    )\n        public\n        override(ERC1155Upgradeable, ITools)\n        whenNotPaused\n        ifNotBlacklisted(from)\n        ifNotBlacklisted(to)\n    {\n        require(amount == 1, \"Tools: tokenId is unique\");\n\n        uint256 toolType = _ownedTools[from][toolId].toolType;\n        require(toolType > 0, \"Tools: tool doesn't exist\");\n\n        if (\n            _ownedTools[from][toolId].strength !=\n            _typesToTools[toolType].maxStrength\n        ) {\n            require(\n                from == _miningAddress || to == _miningAddress,\n                \"Tools: transfer of used tool not to the mining\"\n            );\n        }\n\n        super.safeTransferFrom(from, to, toolType, amount, data);\n        emit Transfer(from, to, toolType, toolId);\n        _ownedTools[to][toolId] = _ownedTools[from][toolId];\n        delete _ownedTools[from][toolId];\n    }\n\n    /// @notice See {ITools-safeBatchTransferFrom}\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory toolIds,\n        uint256[] memory amounts,\n        bytes memory data\n    )\n        public\n        override(ERC1155Upgradeable, ITools)\n        whenNotPaused\n        ifNotBlacklisted(from)\n        ifNotBlacklisted(to)\n    {\n        for (uint256 count = 0; count < toolIds.length; count++) {\n            require(amounts[count] == 1, \"Tools: tokenId is unique\");\n            safeTransferFrom(from, to, toolIds[count], 1, data);\n        }\n    }\n\n    /// @dev Private implementation of `setURI`\n    function _setURI(uint256 toolType, string calldata tokenURI) internal {\n        _idsToURIs[toolType] = tokenURI;\n        emit URI(uri(toolType), toolType);\n    }\n\n    /// @dev Private implementation of `setBaseURI`\n    function _setBaseURI(string calldata baseURI) internal {\n        _baseURI = baseURI;\n        emit BaseURI(uri(1));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}